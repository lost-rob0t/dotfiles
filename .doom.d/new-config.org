#+filetags: ai
#+title: Doom Emacs configuration
#+author: nsaspy

#+property: header-args :emacs-lisp tangle: ./config.el :tangle yes :results none
#+startup: org-startup-folded: showall
#+disable_spellchecker: t
#+begin_src emacs-lisp;; -*- lexical-binding: t -*-
#+end_src

* Configuration
** Things to do
*** PROJ AI sassiest improvements
** Introduction

This is my personal configuration for doom emacs. You can find information on packages in packages.org and yasnippets in snippets.

*** AI assited config
Any code that is tagged with "ai" was made with the use of chat.gpt




** Styling

*** Theme

I prefer the doom-outrun-electric theme for my emacs setup. To set it, I use the following configuration:
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)
#+end_src
*** Line numbers

To enable line numbers in all buffers, I use the following configuration:

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src
*** Frame resize

To allow for more fine-grained control over frame resizing, I use the following configuration:

(setq frame-resize-pixelwise t)
#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src

This may be particularly useful when using a window manager like qtile.

** Packages
*** Magit
Set keybinds for pushing and pulling to/from a remote repository:

#+begin_src emacs-lisp
(map! :leader
:desc "Push current branch to remote branch"
"g p P" #'magit-push-current-to-pushremote)

(map! :leader
:desc "Pull current branch from remote"
"g p p" #'magit-pull-from-pushremote)
#+end_src

*** Magit Todos
Show todos with the following configuration:

#+begin_src emacs-lisp
(require 'magit-todos)
#+end_src

*** Projectile
Set the path to search for projects:

#+begin_src emacs-lisp
(setq projectile-project-search-path
'(("~/Documents/Projects" . 1)))
#+end_src

*** Org Mode
The Org agenda is a powerful tool for managing tasks and appointments in Org mode, a popular open-source organizational tool for Emacs. The agenda allows you to view, filter, and manipulate tasks and appointments from multiple Org files in a single view.

Set the directory for org files:

#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/org")
#+end_src

Update the LAST_MODIFIED field with the current date and time when saving an org roam file. This helps to ensure that the correct modification times are displayed when exporting.

#+begin_src emacs-lisp
(setq time-stamp-active t
time-stamp-start "#\+LAST_MODIFIED:[ \t]*"
time-stamp-end "$"
time-stamp-format "[%Y-%02m-%02d %3a %02H:%02M]")
(add-hook 'before-save-hook 'time-stamp nil)
#+end_src

**** org capture location
This code defines a function that prompts the user for the location to place a capture in an Org document, and then jumps to that location.

#+begin_src emacs-lisp
(defun org-ask-location ()
(let* ((org-refile-targets '((nil :maxlevel . 9)))
(hd (condition-case nil
(car (org-refile-get-location nil nil t t))
(error (car org-refile-history)))))
(goto-char (point-min))
(outline-next-heading)
(if (re-search-forward
(format org-complex-heading-regexp-format (regexp-quote hd))
nil t)
(goto-char (point-at-bol))
(goto-char (point-max))
(or (bolp) (insert "\n"))
(insert "* " hd "\n")))
(end-of-line))
#+end_src
**** Org Agenda

This code configures the Org agenda to display TODO items from all .org files in the ~/Documents/Notes/ directory, recursively. It also defines a function org-agenda-update-files that allows the user to update the org-agenda-files variable interactively, and binds this function to the key sequence SPC o a u.

In addition, the code sets up keybindings for quickly switching between different views in the Org agenda, using the org-agenda-week-view, org-agenda-month-view, and org-agenda-year-view functions. These keybindings allow the user to switch to the week, month, or year view of the agenda by pressing SPC o a w, SPC o a m, or SPC o a y, respectively.


#+begin_src emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/Documents/Notes/" "\.org$"))
#+end_src

Update the org-agenda-files variable interactively with the following function and keybind:

#+begin_src emacs-lisp
(defun org-agenda-update-files ()
"Update the org-agenda-files"
(interactive)
(setq org-agenda-files (directory-files-recursively "~/Documents/Notes/" "\.org$")))
(map! :leader
:desc "Update agenda"
"o a u" #'org-agenda-update-files)
#+end_src

For convenience, set keybinds to switch between different views in the org agenda:

#+begin_src emacs-lisp
(map! :leader
:desc "Switch to week view"
"o a w" #'org-agenda-week-view)

(map! :leader
:desc "switch to month view"
"o a m" #'org-agenda-month-view)

(map! :leader
:desc "switch to month view"
"o a y" #'org-agenda-year-view)
#+end_src


**** Org super agenda

The `org-super-agenda` is a powerful tool for organizing and prioritizing tasks in Org mode. It allows you to create custom agenda views by grouping tasks based on various properties, such as their `:todo` state, `:tag`, `:priority`, `:effort`, or `:scheduled` date.

The code above sets up four agenda groups for the `org-super-agenda`, each with a different set of tasks and a descriptive name. The first group includes ideas for new projects or improvements at Starintel, tagged with "starintel" or "sit". The second group includes bugs that need to be fixed at Starintel, tagged with "starintel-bug" or "sib". The third group includes personal tasks and errands, tagged with "mow" or "trash". The fourth group includes items to read in the inbox, such as books or articles, tagged with "book", "artical", or "books".

You can use the `org-super-agenda` to quickly focus on the tasks that are most important to you, and to track your progress on different types of work. To use the `org-super-agenda`, simply invoke the `org-agenda` command and select the "super" view. The agenda will display the tasks in the groups you have defined, along with any other tasks that match the selected agenda options.
#+begin_src emacs-lisp
(setq-default org-super-agenda-groups
  '(
    (:and (:todo "IDEA" :name "Starintel Ideas" :tag ("starintel" "sit"))
          "Ideas for new projects or improvements at Starintel")
    (:and (:todo "TODO" :name "Starintel Bugs" :tag ("starintel-bug" "sib"))
          "Bugs that need to be fixed at Starintel")
    (:and (:todo "TODO" :name "Personal" :tag ("mow" "trash"))
          "Personal tasks and errands")
    (:and (:todo "TODO" :name "Read inbox" :tag ("book" "artical" "books"))
          "Items to read in the inbox, such as books or articles")))
#+end_src

**** Org Templates

Chat Prompts allow you to get the ai to do a certain think like help you learn programming

#+begin_src emacs-lisp

#+end_src

**** Babel

Tangle a file:

#+begin_src emacs-lisp
(map! :leader
      :desc "Tangle a file"
      "b t" #'org-babel-tangle)
#+end_src

Oh wow, look at me using Babel to tangle a file. I'm such a literate programming expert, you guys.

Execute the selected source block (used for literate programming):

#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute selected source block"
      "c b" #'org-babel-execute-src-block)
#+end_src

Ooh, I can execute a selected source block too. How impressive.

Execute all src blocks in buffer:

#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute buffer"
      "c B" #'org-babel-execute-buffer)
#+end_src

Wow, look at me go, executing all the src blocks in the buffer like it's no big deal.

Add languages to Org Babel:

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t) (org . t) (nim . t) (python . t) (erlang . t) (ein . t) (lisp . t)))
#+end_src

And of course, I can add languages to Org Babel too. No big deal. Just another day in the life of a literate programming pro.
**** Better Formating in org-babel
Adapted from [[https://www.reddit.com/r/emacs/comments/9tp79o/comment/e90g7km/?utm_source=share&utm_medium=web2x&context=3][here]].


This is an Emacs Lisp (elisp) function that defines three functions: edit-src-block, format-elisp-string, and format-elisp-src-blocks. edit-src-block takes three arguments: src, fn, and language. It is used to replace the value property of an org-element's source block with the result of fn, which is a function that operates on the org-element's value and returns a string. format-elisp-string takes a string as an argument and indents it, then reformats any dangling parens. format-elisp-src-blocks is an interactive function that formats all Elisp src blocks in the current org buffer. Finally, a key binding is set for format-elisp-src-blocks in the org-babel-formats prefix of the leader keymap.

#+begin_src emacs-lisp
(defun edit-src-block (src fn language)
  "Replace SRC org-element's value property with the result of FN.
FN is a function that operates on org-element's value and returns a string.
LANGUAGE is a string referring to one of orb-babel's supported languages.
(https://orgmode.org/manual/Languages.html#Languages)"
  (let ((src-language (org-element-property :language src))
        (value (org-element-property :value src)))
    (when (string= src-language language)
      (let ((copy (org-element-copy src)))
        (org-element-put-property copy :value
                                  (funcall fn value))
        (org-element-set-element src copy)))))

(defun format-elisp-string (string)
  "Indents elisp buffer string and reformats dangling parens."
  (with-temp-buffer
    (let ((inhibit-message t))
      (emacs-lisp-mode)
      (insert
       (replace-regexp-in-string "[[:space:]]*
[[:space:]]*)" ")" string))
      (indent-region (point-min) (point-max))
      (buffer-substring (point-min) (point-max)))))

(defun format-elisp-src-blocks ()
  "Format Elisp src blocks in the current org buffer"
  (interactive)
  (save-mark-and-excursion
    (let ((AST (org-element-parse-buffer)))
      (org-element-map AST 'src-block
        (lambda (element)
          (edit-src-block element #'format-elisp-string "emacs-lisp")))
      (delete-region (point-min) (point-max))
      (insert (org-element-interpret-data AST)))))

(map! :leader
      :after org
      :prefix ("b" . "org-babel-fomats")
      :desc "format src" "f" #'format-elisp-src-blocks)
#+end_src

**** LSP with org-babel
[[https://github.com/emacs-lsp/lsp-mode/issues/2842#issuecomment-870807018][Source]]
***** Python
#+begin_src emacs-lisp
(defun org-babel-edit-prep:python (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src

***** Nim
#+begin_src emacs-lisp
(defun org-babel-edit-prep:nim (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src

***** Bash
#+begin_src emacs-lisp
(defun org-babel-edit-prep:sh (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp))
#+end_src
**** Org Tempo templates
I expirment with different languages, org babel makes things easy.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("php" . "src php"))
  (add-to-list 'org-structure-template-alist '("jn" . "src json"))
  (add-to-list 'org-structure-template-alist '("xm" . "src xml"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("nim" . "src nim"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src common-lisp"))
  (add-to-list 'org-structure-template-alist '("nix" . "src nix")))
#+end_src

**** Doom config sync

Create a function to tangle and sync doom at the same time
#+begin_src emacs-lisp
(defvar org-configs-list '("~/.doom.d/config.org" "~/.doom.d/packages.org")
  "A list of org documents that hold configuration. These files will be tangled to generate elisp files.")

(defun tangle-orgs (config-list)
  "Tangle a list of org documents specified in CONFIG-LIST."
  (mapc 'org-babel-tangle-file config-list))

(defun doom-config-sync ()
  "Tangle org configuration files and run `doom/reload' to sync the changes."
  (interactive)
  (tangle-orgs org-configs-list)
  (doom/reload))
;(map! :leader
;      :after help-mode
;      :map help-mode-map
;      :prefix ("r" . "+reload")
;      :desc "Tangle Configs and reload" "s" #'doom-config-sync)


#+end_src
**** Org wiki
#+begin_src emacs-lisp
;;(require 'org-wiki)
#+end_src
**** org-download
This extension facilitates moving images from point A to point B.

#+begin_src emacs-lisp
(require 'org-download)

;; Drag-and-drop to `dired`
;;(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src


Configure keybinds. this will be under `SPC m a `
#+begin_src emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
      :prefix ("a" . "attachments")
      :desc "paste image" "p" #'org-download-clipboard
      :desc "insert image from url" "i" #'org-download-yank)
#+end_src

**** Org Roam
A Personal wiki

Set roam directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/Notes/org/roam")
#+end_src

Set a daily capture format
#+begin_src emacs-lisp
;;  Tahnk you, this comment fixed my old config!
;;  https://www.reddit.com/r/DoomEmacs/comments/sk8558/comment/hxxp7l0/?utm_source=share&utm_medium=web2x&context=3

(after! org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/Documents/Notes/org/roam")
  (setq org-roam-complete-everywhere t)
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n") :unnarrowed t)
          ("w" "wiki" plain "*%? %^g"
           :target (file+head "wiki/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("h" "hackthebox" plain "%?"
           :target (file+head "hackthebox/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n")))))

#+end_src
**** url2org
function for importing info from the web

#+begin_src emacs-lisp
(defun url2org (begin end)
  "Download a webpage from selected url and convert to org."
  (interactive "r")
  (shell-command-on-region begin end
                           (concat "pandoc --from=html --to=org " (buffer-substring begin end))
                           nil t))
#+end_src

**** Misc roam
For some reason caching on write isnt working.
If my notes get slow i will disable it.
#+begin_src emacs-lisp
;;(setq org-roam-db-update-on-save t)
#+end_src


**** Org File Encryption

Eyes off my doccuments
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+end_src

#+begin_src emacs-lisp
(setq epa-file-encrypt-to '("nsaspy@airmail.cc"))
#+end_src

#+begin_src emacs-lisp
(setq epa-file-select-keys "235327FBDEFB3719")
#+end_src

**** Org Pomodoro
#+begin_src emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
      :prefix ("c" . "clock")
      :desc "Start Pomodoro" "T" #'org-pomodoro)
#+end_src

**** Org Present
Create presentations with org mode
#+begin_src emacs-lisp
(eval-after-load 'org-present
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+end_src

**** Org Pomodoro
#+begin_src emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
      :prefix ("c" . "clock")
      :desc "Start Pomodoro" "T" #'org-pomodoro)
#+end_src

**** Org Present
Create presentations with org mode
#+begin_src emacs-lisp
(eval-after-load 'org-present
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+end_src


**** Misc related functions for org mode
*****  Time Stamp updater :ai:
#+begin_src emacs-lisp
(defun update-timestamps (directory)
  "Update timestamps in all org files in DIRECTORY."
  (interactive "DDirectory: ")
  (let ((files (directory-files-recursively directory "\\.org$")))
    (dolist (file files)
      (with-current-buffer (find-file-noselect file)
        (save-excursion
          (goto-char (point-min))
          (time-stamp))))))

(defun update-timestamps-in-directory (directory)
  "Update timestamps in all org files in DIRECTORY."
  (let ((files (directory-files-recursively directory "\\.org$")))
    (dolist (file files)
      (with-current-buffer (find-file-noselect file)
        (save-excursion
          (goto-char (point-min))
          (time-stamp))))))

#+end_src


** AI Based improvements
This file was based on my old config, seeing the advent of ai and my poor elisp Code i elected to use ai to help imrpove my emacs config


*** Org Related
**** Question And Awnsers :ai:
Q: Can you make a emacs capute template to capture yor responses to a file?
AI:
#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
             '(
               "q"
               "AI Questions"
               entry
               (file "~/Documents/Notes/org/ai_questions.org")
               "* Questions\n** Question: %?\n   Q: %i\n*** Answer\n%i"
             )
)

#+end_src

**** Save Org headlines tags to the #+filetags :ai:
#+begin_src emacs-lisp
(defun set-org-tags ()
  "Get all tags from org headlines in the current buffer and append them to the top of the file under the #+filetags: line."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((tags '()))
      (while (re-search-forward "^*+ .+?\\(:[[:alnum:]_@:]+:\\)" nil t)
        (let ((tag-string (match-string 1)))
          (setq tags (append (split-string (substring tag-string 1 -1) ":" t) tags))))
      (setq tags (delete-dups tags))
      (setq tags (mapcar 'downcase tags))  ; convert tags to lowercase
      (setq tags (delete-dups tags))  ; remove duplicates
      (goto-char (point-min))
      (if (re-search-forward "^#\\+filetags:" nil t)
          (progn
            (beginning-of-line)
            (kill-line)
            (insert "#+filetags: " (mapconcat 'identity tags " ")))
        (progn
          (goto-char (point-min))
          (insert "#+filetags: " (mapconcat 'identity tags " ")))))))




#+end_src

*** Ahdhd lol :ai:
#+begin_src emacs-lisp
(defvar org-pomodoro-active nil
  "Whether a pomodoro timer is currently active.")

(defun org-pomodoro-alert ()
  "Beep and send a desktop notification if a pomodoro timer is active and
Emacs is not the active window."
  (when (and org-pomodoro-active (not (eq (selected-window) (frame-selected-window))))
    (beep)
    (notifications-notify
     :title "Pomodoro Alert"
     :body "Don't forget to stay focused on your task!")))

(defun org-pomodoro-start ()
  "Start a pomodoro timer and set `org-pomodoro-active' to t."
  (setq org-pomodoro-active t)
  (org-pomodoro))

(defun org-pomodoro-end ()
  "End a pomodoro timer and set `org-pomodoro-active' to nil."
  (setq org-pomodoro-active nil))

(add-hook 'org-pomodoro-started-hook #'org-pomodoro-start)
(add-hook 'org-pomodoro-finished-hook #'org-pomodoro-end)
(add-hook 'focus-out-hook #'org-pomodoro-alert)
#+end_src

