#+title: Doom Packages
#+author: nsaspy
#+property: header-args :emacs-lisp tangle: ./packages.el :tangle yes :results none
#+startup: org-startup-folded: showall
#+disable_spellchecker: t
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
;;; Package management

;; Please don't load outdated byte code
(setq load-prefer-newer t)

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      ;; Package archives
      '(("GNU ELPA" . "http://elpa.gnu.org/packages/") ("MELPA Stable" . "https://stable.melpa.org/packages/") ("MELPA" . "https://melpa.org/packages/"))
      ;; Prefer MELPA Stable over GNU over MELPA. IOW prefer MELPA's stable
      ;; packages over everything and only fall back to GNU or MELPA if ;; necessary.
      package-archive-priorities '(("MELPA Stable" . 10) ("GNU ELPA" . 5) ("MELPA" . 0))) (package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package))

(eval-when-compile (require 'use-package))
#+end_src
* About
This org document contains all the packages that i install into emacs. I thought about merging it into config.org but thats just going to make a big mess. I will split it into sections and catogries of packages.

+ Config is here [[./config.org]]


** Org mode
*** org-roam-ui
Org-Roam-UI is a frontend for exploring and interacting with your org-roam notes.
unpin org-roam.
#+begin_src emacs-lisp
(unpin! org-roam)
(package! org-roam-ui)
#+end_src
*** org-ql
This package provides a query language for Org files. It offers two syntax styles: Lisp-like sexps and search engine-like keywords.
#+begin_src emacs-lisp
(package! org-ql :recipe (:type git :host github :repo "alphapapa/org-ql"))
#+end_src


*** org-timed-alerts
Receive warnings and alerts via alert.el for upcoming events in your day.
#+begin_src emacs-lisp
(package! org-timed-alerts :recipe (:type git :host github :repo "legalnonsense/org-timed-alerts"))
#+end_src

*** org-alert
Provides notifications for scheduled or deadlined agenda entries.
#+begin_src emacs-lisp
(package! org-alert)
#+end_src


*** org-download
This extension facilitates moving images from point A to point B.

#+begin_src emacs-lisp
(package! org-download :recipe (:type git :host github :repo "abo-abo/org-download"))
#+end_src


*** org-wiki
Build and publish your own wiki based on org mode
#+begin_src emacs-lisp
(package! org-wiki :recipe (:type git :host github :repo "caiorss/org-wiki"))
#+end_src
*** ox-hugo
export to hugo markdown
#+begin_src emacs-lisp
(package! ox-hugo)
#+end_src
*** org-present-mode
Make presentations
#+begin_src emacs-lisp
(package! org-present :recipe (:type git :host github :repo "rlister/org-present"))
#+end_src

*** org-pomodoro
#+begin_src emacs-lisp
(package! org-pomodoro)
#+end_src

** Development
*** Codeium ai code completion tool
#+begin_src emacs-lisp
(package! codeium :recipe (:type git :host github :repo "Exafunction/codeium.el"))
#+end_src
*** envrc
A GNU Emacs library which uses direnv to set environment variables on a per-buffer basis. This means that when you work across multiple projects which have .envrc files, all processes launched from the buffers "in" those projects will be executed with the environment variables specified in those files. This allows different versions of linters and other tools to be used in each project if desired.

#+begin_src emacs-lisp
(package! envrc :recipe (:type git :host github :repo "purcell/envrc"))
#+end_src

*** protobufs
#+begin_src emacs-lisp
(package! protobuf-mode)
#+end_src
*** Langauges
**** Nim lang
***** Nim Mode
#+begin_src emacs-lisp
(package! nim-mode :pin "674ecd1ebfe23cb13791edbf5c79e3bec25dbdc5")
#+end_src
***** flycheck-nim
Flycheck-nim is a syntax checker definition for flycheck which supports the Nim programming language using the nim compiler as the backend.
#+begin_src emacs-lisp
(package! flycheck-nim :recipe (:type git :host github :repo "ALSchwalm/flycheck-nim"))
#+end_src

**** gForth
major mode for gforth
#+begin_src emacs-lisp
(package! gforth.el :recipe (:type git :host github :repo "smtlaissezfaire/gforth.el"))
#+end_src

**** nix
***** nix-emacs
set of usful emacs modes for nix
#+begin_src emacs-lisp
(package! nix-emacs :recipe (:type git :host github :repo "travisbhartwell/nix-emacs"))
#+end_src
**** Python
#+begin_src emacs-lisp
(package! lsp-pyright :recipe (:type git :host github :repo "emacs-lsp/lsp-pyright"))
#+end_src

**** Lisp
#+begin_src emacs-lisp
(package! evil-smartparens)
#+end_src

**** Prolog
LOGIC!
***** ob-prolog
https://github.com/ljos/ob-prolog
Org babel functions for prolog.
#+begin_src emacs-lisp
(package! ob-prolog)
#+end_src
** Utils
*** Hackmode
Hack banks from emacs
jk, package full of utilities for pentesting
#+begin_src emacs-lisp
(package! hackmode :recipe (:type git :host github :repo "lost-rob0t/emacs-hackmode"))
#+end_src
*** webpaste.el
paste your buffer to a pastebin like service.
#+begin_src emacs-lisp
(package! webpaste :recipe (:type git :host github :repo "etu/webpaste.el"))
#+end_src
*** Burly
This package provides tools to save and restore frame and window configurations in Emacs, including buffers that may not be live anymore. In this way, it’s like a lightweight “workspace” manager, allowing you to easily restore one or more frames, including their windows, the windows’ layout, and their buffers.

#+begin_src emacs-lisp
(package! burly :recipe (:type git :host github :repo "alphapapa/burly.el"))
#+end_src
*** podman.el
Manage podman containers
#+begin_src emacs-lisp
(package! podman.el :recipe (:type git :host github :repo "akirak/podman.el"))
#+end_src

*** pcap-mode.el
A major mode for view pcap capture files
#+begin_src emacs-lisp
(package! pcap-mode.el :recipe (:type git :host github :repo "orgcandman/pcap-mode"))
#+end_src
*** exec-path-from-shell
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.
#+begin_src emacs-lisp
(package! exec-path-from-shell  :recipe (:type git :host github :repo "purcell/exec-path-from-shell"))
#+end_src

*** cheat-sh
get cheatsheets
#+begin_src emacs-lisp
(package! cheat-sh :recipe (:type git :host github :repo "davep/cheat-sh.el"))
#+end_src

*** activity watch
keep track of time.
#+begin_src emacs-lisp
(package! activity-watch-mode :recipe (:type git :host github :repo "pauldub/activity-watch-mode"))
#+end_src

*** TODO Sqlite mode
*** Discover
Find more of emacs using context menus
#+begin_src emacs-lisp
(package! discover :recipe (:type git :host github :repo "mickeynp/discover.el"))
#+end_src
*** atomic-chrome
This is the Emacs version of Atomic Chrome which is an extension for Google
Chrome browser that allows you to edit text areas of the browser in Emacs.

It's similar to Edit with Emacs, but has some advantages as below with the
help of websocket.
#+begin_src emacs-lisp
(package! atomic-chrome)
#+end_src

*** noaa
Get weather from the government
#+begin_src emacs-lisp :tangle yes
(package! noaa.el :recipe (:type git :host github :repo "thomp/noaa"))
#+end_src



*** app-launcher
#+begin_src emacs-lisp
(package! app-launcher :recipe (:type git :host github :repo "SebastienWae/app-launcher"))
#+end_src

*** yassnippets collection
#+begin_src emacs-lisp :tangle yes
(package! yasnippet-snippets)


#+end_src
** Lib packages
*** plz
plz is an HTTP library for Emacs. It uses curl as a backend, which avoids some of the issues with using Emacs’s built-in url library.
#+begin_src emacs-lisp
(package! plz :recipe (:type git :host github :repo "alphapapa/plz.el"))
#+end_src
*** ts
ts is a date and time library for Emacs. It aims to be more convenient than patterns like (string-to-number (format-time-string "%Y")) by providing easy accessors, like (ts-year (ts-now)).

#+begin_src emacs-lisp
(package! ts :recipe (:type git :host github :repo "alphapapa/ts.el"))
#+end_src
*** dash
A modern list API for Emacs. No 'cl required.
#+begin_src emacs-lisp
(package! dash :recipe (:type git :host github :repo "magnars/dash.el"))
#+end_src
*** s.el
Long lost string manipulation lib.
#+begin_src emacs-lisp
(package! s :recipe (:type git :host github :repo "magnars/s.el"))
#+end_src
*** alert
Send alerts
#+begin_src emacs-lisp
(package! alert :recipe (:type git :host github :repo "jwiegley/alert"))
#+end_src
*** f.el
Modern api for files
#+begin_src emacs-lisp
(package! f)
#+end_src
*** Async
Async.el is for doing async processing in emacs. I use it for hack-mode.el
Looks likes its already in doom emacs...
#+begin_src emacs-lisp
(package! emacs-async :recipe (:type git :host github :repo "jwiegley/emacs-async"))
#+end_src
*** triples
db module based on sqlite

Testing it out for hackmode, might remove later
#+begin_src emacs-lisp
(package! triples :recipe (:type git :host github :repo "ahyatt/triples"))
#+end_src

*** emacsql
A high-level Emacs Lisp RDBMS front-end
#+begin_src emacs-lisp
(package! emacsql :recipe (:type git :host github :repo "magit/emacsql"))
#+end_src

*** Message pack
msgpack.el is an Emacs Lisp library for reading and writing MessagePack.
#+begin_src emacs-lisp
(package! msgpack.el :recipe (:type git :host github :repo "xuchunyang/msgpack.el"))
#+end_src

*** emacs-kv
A collection of tools for dealing with key/value data structures such as plists, alists and hash-tables.
Required by emacs-db
#+begin_src emacs-lisp
(package! emacs-kv :recipe (:type git :host github :repo "nicferrier/emacs-kv"))
#+end_src
*** jeison
Pasring json in a declraritive manner
Personnaly i find in other languages like nim creating a type then marshalling json into it is the best way to deal with json IMO
#+begin_src emacs-lisp
(package! jeison)
#+end_src
*** org-contrib

#+begin_src emacs-lisp
(package! org-contrib)
#+end_src



** Messaging And media
*** ement
a matrix client for emacs
#+begin_src emacs-lisp
(package! ement :recipe (:type git :host github :repo "alphapapa/ement.el"))
#+end_src
*** mastodon
Emacs client for mastodon/pleroma
#+begin_src emacs-lisp
(package! mastodon)
#+end_src

*** Cuckord
I only use it for normal fren stuff

#+begin_src emacs-lisp
(package! elcord :recipe (:type git :host github :repo "Mstrodl/elcord"))
#+end_src

*** elfeed-tube
MPV+elfeed
#+begin_src emacs-lisp
(package! elfeed-tube)
#+end_src
** rice
*** inherit-org
Add org faces to non org buffers.
#+begin_src emacs-lisp
;(package! inherit-org :recipe (:host github :repo "chenyanming/inherit-org"))
#+end_src
*** Golden ratio
When working with many windows at the same time, each window has a size that is not convenient for editing.

golden-ratio helps on this issue by resizing automatically the windows you are working on to the size specified in the "Golden Ratio". The window that has the main focus will have the perfect size for editing, while the ones that are not being actively edited will be re-sized to a smaller size that doesn't get in the way, but at the same time will be readable enough to know it's content.

#+begin_src emacs-lisp
(package! golden-ratio.el :recipe (:host github :repo "roman/golden-ratio.el"))
#+end_src
** dirvish
a better dired
#+begin_src emacs-lisp
(package! dirvish :recipe (:host github :repo "alexluigit/dirvish"))
#+end_src
** Games
*** Kerbal Space Program

KOs mode for writing scripts

#+begin_src emacs-lisp
(package! ks-mode :recipe (:type git :host github :repo "jarpy/ks-mode"))
#+end_src
** Spell checkers

Disable flyspell
#+begin_src emacs-lisp
(package! flyspell-lazy :disable t)
#+end_src
