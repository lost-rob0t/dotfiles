#+title: Doom Emacs configuration
#+author: nsaspy
#+CREATED: [2021-01-01 Fri 00:00]
#+LAST_MODIFIED: [2024-09-05 Thu 02:20]
#+property: header-args :emacs-lisp tangle: ./config.el :tangle yes :results none
#+startup: org-startup-folded: overview
#+disable_spellchecker: t
#+begin_src emacs-lisp;; -*- lexical-binding: t -*-
#+end_src
* About
This is my personal doom emacs config, you can find package related stuff in packages.org [[./packages.org][packages.org]]
yasnippets are in snippets



* init.el
This section tangles the init file
#+begin_src emacs-lisp :tangle ./init.el
;;; ../.dotfiles/.doom.d/init-new.el -*- lexical-binding: t; -*-

;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!
;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

;; NOTE DO NOT EDIT THIS FILE, EDIT IT IN CONFIG.ORG!
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       ;(vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp +tree-sitter)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;(nim +lsp)               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2 +hugo)               ; organize your plain life in plain text
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +tree-sitter)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))

#+end_src


* Multi Platform config
Stuff to determin os and apply settings to fit that system

See [[file:~/.dotfiles/lisp/nixos-helpers/system.el][system.el]] for how I determin my system

Load my Personal elisp
#+begin_src emacs-lisp
(dolist (file (directory-files-recursively "~/.dotfiles/lisp" "\\.el$"))
  (load file))
#+end_src
* Styling
** Theme
I like doom's outrun electric theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)
#+end_src
*** Theme toggle
I like to use my laptop outside, dark-themes looks bad outside.
[[https://emacs.stackexchange.com/a/26981][Source]].
#+begin_src emacs-lisp :tangle yes
(setq ivan/themes '(doom-gruvbox-light doom-outrun-electric))
(setq ivan/themes-index 0)

(defun ivan/cycle-theme ()
  (interactive)
  (setq ivan/themes-index (% (1+ ivan/themes-index) (length ivan/themes)))
  (ivan/load-indexed-theme))

(defun ivan/load-indexed-theme ()
  (ivan/try-load-theme (nth ivan/themes-index ivan/themes)))

(defun ivan/try-load-theme (theme)
  (if (ignore-errors (load-theme theme :no-confirm))
      (mapcar #'disable-theme (remove theme custom-enabled-themes))
    (message "Unable to find theme file for â€˜%sâ€™" theme)))

#+end_src

Map this theme toggle to SPC t T
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Cycle The Theme" "T" #'ivan/cycle-theme))

#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src
** Frame resize
This might help for wm like qtile
#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src
I have also noticed that it is prob required on my laptop running a Intel N3060.
** Fonts
Setting nerdfonts
#+begin_src emacs-lisp
;(setq
; doom-font (font-spec :family "Hack Regular Nerd Font Complete Mono" :size 12)
; doom-big-font (font-spec :family "Hack Bold Nerd Font Complete" :size 18)
; doom-variable-pitch-font (font-spec :family "Hack Regular Nerd Font Complete Mono" :size 12)
; doom-serif-font (font-spec :family "Hack Regular Nerd Font Complete Mono" :size 12))
#+end_src
*** DONE Fix the wrong fonts
** Hide async shell commands
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
  (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src
* System config
Here you will find desktop/system settings
** Brave Setup
My default Browser is brave, for one reason the user info-less sync.
Why the fuck do i need to enter my email?
This wasn't needed but maybe i want chromium for some reason?
#+begin_src emacs-lisp
(defvar browse-url-brave-program "brave")
(defvar browse-url-brave-arguments nil)

(defun browse-url-brave (url &optional _new-window)
  "Ask the Brave browser to load URL.
Default to the URL around or before point.  The strings in
variable `browse-url-brave-arguments' are also passed to
Brave.
The optional argument NEW-WINDOW is not used."
  (interactive (browse-url-interactive-arg "URL: "))
  (setq url (browse-url-encode-url url))
  (let* ((process-environment (browse-url-process-environment)))
    (apply #'start-process
	   (concat "brave" url) nil
	   browse-url-brave-program
	   (append
	    browse-url-brave-arguments
	    (list url)))))

#+end_src


** Default Browser
My default Browser is brave, for one reason the emailess sync
If you want to bitch about it, consider some rope

Define a open in brave function

#+begin_src emacs-lisp
(setq
 browse-url-browser-function
 '(
  ("wikipedia\\.org" . eww-browse-url)
  ("github" . browse-url-brave)
  ("." . browse-url-brave)
  ))
#+end_src
** Libvirt
Manage virtual machines from emacs
#+begin_src emacs-lisp
(require 'libvirt)
#+end_src
* Org Mode
Setting org dir
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/org")
#+end_src

Source: https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321
i needed this to keep track of when i modify an org roam file so when i export it the times are correct.

#+begin_src emacs-lisp
(setq time-stamp-active t
      time-stamp-start "#\\+LAST_MODIFIED:[ \t]*"
      time-stamp-end "$"
      time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
(add-hook 'before-save-hook 'time-stamp nil)
#+end_src
*** org capture
Ask me where to place a capture at [[https://stackoverflow.com/a/24787118][source.]]
#+begin_src emacs-lisp
(defun org-ask-location ()
  (let* ((org-refile-targets '((nil :maxlevel . 9)))
         (hd (condition-case nil
                 (car (org-refile-get-location nil nil t t))
               (error (car org-refile-history)))))
    (goto-char (point-min))
    (outline-next-heading)
    (if (re-search-forward
         (format org-complex-heading-regexp-format (regexp-quote hd))
         nil t)
        (goto-char (point-at-bol))
      (goto-char (point-max))
      (or (bolp) (insert "\n"))
      (insert "* " hd "\n")))
    (end-of-line))
#+end_src
**** Org Capture Templates
Here i override the capture templates, some intergrating into org roam
#+begin_src emacs-lisp
;; TODO Fix the mm template
(setq  org-capture-templates '(("m" "Personal Meditations")

                               ("mm" "Meditations Life General" entry
                                (file+olp+datetree "~/Documents/Notes/org/meditations.org")
                                "* %<%Y>\n ** %<%B>\n *** %<%d> %<%H:%M>\n %x")
                               ("t" "Personal todo" entry
                                (file+headline +org-capture-todo-file "Inbox")
                                "* [ ] %?\n%i\n%a" :prepend t)
                               ("n" "Personal notes" entry
                                (file+headline +org-capture-notes-file "Inbox")
                                "* %u %?\n%i\n%a" :prepend t)
                               ("j" "Journal" entry #'org-roam-dailies-capture-today
                                "* %I %?" :prepend t)
                               ("p" "Templates for projects")
                               ("pt" "Project-local todo" entry
                                (file+headline +org-capture-project-todo-file "Inbox")
                                "* TODO %?\n%i\n%a" :prepend t)
                               ("pn" "Project-local notes" entry
                                (file+headline +org-capture-project-notes-file "Inbox")
                                "* %U %?\n%i\n%a" :prepend t)
                               ("pc" "Project-local changelog" entry
                                (file+headline +org-capture-project-changelog-file "Changelog")
                                "* %U %?\n%i\n%a" :prepend t)
                               ("o" "Centralized templates for projects")
                               ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
                               ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
                               ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t)
                               ("i" "Ideas Box" entry (file+headline "~/Documents/Notes/org/ideas.org" "Ideas")
                                "* IDEA %? %^g")
                               ("a" "Templates for AI")
                               ("ap" "Save a AI prompt for later" entry
                                (file+headline "~/Documents/Notes/org/ai-prompts.org" "Prompts")
                                "* %U %?\n%i\n%a" :prepend t)
                               ("ai" "LLM/AI Injection (Bypasses)" entry
                                (file+headline "~/Documents/Notes/org/ai-prompts.org" "Injections")
                                "* %U %?\n%i\n%a" :prepend t)))






#+end_src
*** Org Agenda
Find all TODOS recursively [[https://stackoverflow.com/a/41969519][source]].
#+begin_src emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/Documents/Notes/org/agenda/" "\\.org$"))
;(dolist (file (directory-files-recursively "~/Documents/Notes/org/roam/" "\\.org$"))
;  (add-to-list org-agenda-files file))
#+end_src

#+begin_src emacs-lisp
(defun org-agenda-update-files ()
  "Update the org-agenda-files"
  (interactive)
  (setq org-agenda-files (directory-files-recursively "~/Documents/Notes/org/agenda" "\\.org$")))
(map! :leader
      :desc "update agenda"
      "o a u" #'org-agenda-update-files)
#+end_src

Track a org file by adding it to the agenda folder
#+begin_src emacs-lisp
(defun track-org-file ()
  "Create a symbolic link to the current file in the 'agenda' directory."
  (interactive)
  (let ((current-file (buffer-file-name)))
    (when current-file
      (make-symbolic-link current-file "~/Documents/Notes/org/agenda/")
      (setq org-agenda-files (directory-files-recursively "~/Documents/Notes/org/agenda/" "\\.org$")))))

(map! :after org
      :localleader
      :map org-mode-map
      :desc "Add file to Org agenda" "w" #'track-org-file)
#+end_src

I prefer being able to have different views within org agenda, so i can see whats coming up ahead of time.
#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to week view"
      "o a w" #'org-agenda-week-view)

(map! :leader
      :desc "switch to month view"
      "o a m" #'org-agenda-month-view)

(map! :leader
      :desc "switch to month view"
      "o a y" #'org-agenda-year-view)
#+end_src



**** Org super agenda
#+begin_src emacs-lisp
(setq org-super-agenda-groups
      '(
        (:and (:todo "IDEA" :name "Starintel Idea" :tag ("starintel" "sit")) :name "Starintel ideas")
        (:and (:todo "TODO" :name "Starintel Bugs" :tag ("starintel-bug" "sib")) :name "Star intel Bugs")
        (:and (:todo "TODO" :name "Starintel" :tag ("starintel")) :name "Star Intel")
        (:and (:todo "TODO" :name "Personal" :tag ("personal")) :name "Personal")
        (:and (:todo "TODO" :name "Habits" :tag ("mow" "trash" "clean" "habit")) :name "Habits")
        (:and (:todo "TODO" :name "Emacs" :tag ("emacs")) :name "Emacs")
        (:and (:todo "TODO" :name "Read inbox" :tag ("book" "artical" "books")) :name "Reading")))
#+end_src

*** Babel
Tangle a file
#+begin_src emacs-lisp
(map! :leader
      :desc "Tangle a file"
      "b t" #'org-babel-tangle)
#+end_src

Execute the selected source block (used for literate programming)
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute selected source block"
      "c b" #'org-babel-execute-src-block)
#+end_src

Execute all src blocks in buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute buffer"
      "c B" #'org-babel-execute-buffer)
#+end_src

Add languages to org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t) (org . t) (nim . t) (python . t)  (lisp . t) (prolog . t) (http . t) (graphql . t) (ffuf . t) (makefile . t)))
#+end_src

**** Better Formating in org-babel
Adapted from [[https://www.reddit.com/r/emacs/comments/9tp79o/comment/e90g7km/?utm_source=share&utm_medium=web2x&context=3][here]].
#+begin_src emacs-lisp
(defun edit-src-block (src fn language)
  "Replace SRC org-element's value property with the result of FN.
FN is a function that operates on org-element's value and returns a string.
LANGUAGE is a string referring to one of orb-babel's supported languages.
(https://orgmode.org/manual/Languages.html#Languages)"
  (let ((src-language (org-element-property :language src))
        (value (org-element-property :value src)))
    (when (string= src-language language)
      (let ((copy (org-element-copy src)))
        (org-element-put-property copy :value
                                  (funcall fn value))
        (org-element-set-element src copy)))))

(defun format-elisp-string (string)
  "Indents elisp buffer string and reformats dangling parens."
  (with-temp-buffer
    (let ((inhibit-message t))
      (emacs-lisp-mode)
      (insert
       (replace-regexp-in-string "[[:space:]]*
[[:space:]]*)" ")" string))
      (indent-region (point-min) (point-max))
      (buffer-substring (point-min) (point-max)))))

(defun format-elisp-src-blocks ()
  "Format Elisp src blocks in the current org buffer"
  (interactive)
  (save-mark-and-excursion
    (let ((AST (org-element-parse-buffer)))
      (org-element-map AST 'src-block
        (lambda (element)
          (edit-src-block element #'format-elisp-string "emacs-lisp")))
      (delete-region (point-min) (point-max))
      (insert (org-element-interpret-data AST)))))

(map! :leader
      :after org
      :prefix ("b" . "org-babel-fomats")
      :desc "format src" "f" #'format-elisp-src-blocks)
#+end_src


*** Org Tempo templates
I experiment with different languages, org babel makes things easy.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("php" . "src php"))
  (add-to-list 'org-structure-template-alist '("jn" . "src json"))
  (add-to-list 'org-structure-template-alist '("xm" . "src xml"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("nim" . "src nim"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("nix" . "src nix")))
#+end_src

*** Org config sync
Create a function to tangle and sync doom at the same time
#+begin_src emacs-lisp
(defvar org-configs-list ()
  "A List of org documents that holds your configuration. Will be used to tangle to elisp")
(setq org-configs-list '("~/.doom.d/config.org" "~/.doom.d/packages.org"))
(defun tangle-orgs (config-list)
  "Tangle a list of org documents."
  (mapcar 'org-babel-tangle-file config-list))

(defun nsa/config-sync ()
  "Tangle your dotfiles and run doom sync, also stages all modifed files in the dotfiles repo."
  (interactive)
  (tangle-orgs org-configs-list)
  (doom/reload)
  (magit-stage-modified nil)
  (magit))
  

(defun doom-config-sync ()
  "Alias for 'nsa/config/sync'"
  (nsa/config-sync))


#+end_src
*** org-download
This extension facilitates moving images from point A to point B.

#+begin_src emacs-lisp
(require 'org-download)

;; Drag-and-drop to `dired`
;;(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src


Configure keybinds. this will be under `SPC m a `
#+begin_src emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
      :prefix ("a" . "attachments")
      :desc "paste image" "p" #'org-download-clipboard
      :desc "insert image from url" "i" #'org-download-yank)
#+end_src


*** Org Roam
A Personal wiki

Set roam directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/Notes/org/roam")
#+end_src

#+begin_src emacs-lisp
;;  Tahnk you, this comment fixed my old config!
;;  https://www.reddit.com/r/DoomEmacs/comments/sk8558/comment/hxxp7l0/?utm_source=share&utm_medium=web2x&context=3

(after! org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/Documents/Notes/org/roam/")
  (setq org-roam-dailies-directory "daily")
  (setq org-roam-complete-everywhere t)
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n") :unnarrowed t)
          ("t" "tutorial" plain "*%?"
           :target (file+head "Tutorial/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("h" "hacking" plain "%?"
           :target (file+head "hacking/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("s" "star intel" plain "*%? %^g"
           :target (file+head "starintel/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("x" "sunshine wiki dox" plain "* {slug}\n%?"
           :target (file+head "starintel/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("r" "Reading notes" plain "%?"
           :target (file+head "reading-notes/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("v" "Video notes" plain "%?"
           :target (file+head "reading-notes/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n"))
          ("p" "Programming" plain "%?"
           :target (file+head "programming/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+TITLE: ${title}\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n")))))
  ;; (setq org-roam-dailies-capture-templates
  ;;  '(("d" "default" entry "* %?"
  ;;     :target (file+head "%<%Y-%m-%d>.org" "#+title: %U\n"))
  ;;    ("n" "news" entry "* %? :news:"
  ;;        :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))
  ;;    ("j" "journal" entry "* %<%I:%M %p>%? :personal:"
  ;;       :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  
#+end_src

*** Misc org roam
url2org function for importing info from the web

#+begin_src emacs-lisp
(defun url2org (begin end)
  "Download a webpage from selected url and convert to org."
  (interactive "r")
  (shell-command-on-region begin end
                           (concat "pandoc --from=html --to=org " (buffer-substring begin end))
                           nil t))
#+end_src


For some reason caching on write isnt working.
If my notes get slow i will disable it.
*** Org File Encryption

Eyes off my doccuments
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+end_src

#+begin_src emacs-lisp
(setq epa-file-encrypt-to '("nsaspy@airmail.cc"))
#+end_src

#+begin_src emacs-lisp
(setq epa-file-select-keys "235327FBDEFB3719")
#+end_src

*** Org Present
Create presentations with org mode


Thanks to systems crafters for the prebaked config!
https://www.youtube.com/watch?v=SCPoF1PTZpI
Go sub to him if you havent hes worth your time.
#+begin_src emacs-lisp
;; Hide emphasis markers on formatted text
(setq org-hide-emphasis-markers t)
;;; Centering Org Documents --------------------------------
;; Configure fill width
(setq visual-fill-column-width 180
      visual-fill-column-center-text t)

;;; Org Present --------------------------------------------

;; Install org-present if needed

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-start ()
  ;; Tweak font sizes
  (doom-big-font-mode)
  (org-present-read-only)
  (org-present-hide-cursor)
  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")
  ;; Hide line numbers
  (setq-local display-line-numbers nil)
  ;; Display inline images automatically
  (org-display-inline-images)

  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (doom-big-font-mode)
  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)
  ;; Shone line numbers
  (setq-local display-line-numbers t)
  ;; Stop displaying inline images
  (org-remove-inline-images)
  (org-present-read-write)
  (org-present-show-cursor))
  ;; Stop centering the document


;; Turn on variable pitch fonts in Org Mode buffers
;(add-hook! 'org-mode variable-pitch-mode)

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src


*** TODO Org Idea box
Keep my ideas separated from my todos and give me a random idea from the file
#+begin_src emacs-lisp
;; (defvar nsa/ideas-file (f-join org-directory "ideas.org"))
;; (defvar nsa/ideas-file (f-join org-directory "ideas.org") "The file that holds your cool ideas.")

;; (defun get-idea ()
;;   "Get a random idea todo."
;;   (with-temp-buffer
;;     (insert-file-contents nsa/ideas-file)
;;     (org-element-cache-map #'identity)
;;     (let ((elements (org-map-entries #'identity "TODO=\"IDEA\""))) elements)))

#+end_src
*** alert
Send Alerts from emacs

You must set the command, it is nil be default
I use dunst as my notification system, here is a config to set that up
#+begin_src emacs-lisp
(require 'alert)
(setq alert-default-style 'libnotify)
(setq alert-libnotify-command "dunstify")
#+end_src

This is needed for it to work at all....[fn:3]
#+begin_src emacs-lisp
(defun alert-libnotify-notify (info)
  "Send INFO using notifications-notify.
Handles :ICON, :CATEGORY, :SEVERITY, :PERSISTENT, :NEVER-PERSIST, :TITLE
and :MESSAGE keywords from the INFO plist.  :CATEGORY can be
passed as a single symbol, a string or a list of symbols or
strings."
  (if (fboundp #'notifications-notify)
      (let ((category (plist-get info :category))
            (urgency (cdr (assq (plist-get info :severity) alert-libnotify-priorities))))
        (notifications-notify
         :title (alert-encode-string (plist-get info :title))
         :body (alert-encode-string (plist-get info :message))
         :app-icon (or (plist-get info :icon) alert-default-icon)
         :category (cond ((symbolp category)
                          (symbol-name category))
                         ((stringp category) category)
                         ((listp category)
                          (mapconcat (if (symbolp (car category))
                                         #'symbol-name
                                       #'identity)
                                     category ",")))
         :timeout (* 1000 ; notify-send takes msecs
                     (if (and (plist-get info :persistent)
                              (not (plist-get info :never-persist)))
                         0 ; 0 indicates persistence
                       alert-fade-time))
         :urgency (if urgency (symbol-name urgency) "normal")))
    (alert-message-notify info)))
#+end_src

*** Org alerts
Configure Org alerts to use alert.el
#+begin_src emacs-lisp
(require 'org-alert)
(use-package! org-timed-alerts
  :config
  (setq org-timed-alerts-alert-function #'alert-libnotify-notify)
  (setq org-timed-alerts-tag-exclusions nil)
  (setq org-timed-alerts-default-alert-props nil)
  (setq org-timed-alerts-warning-times '(-10 -5))
  (setq org-timed-alerts-agenda-hook-p t)
  (setq org-timed-alert-final-alert-string "IT IS %alert-time\n\n%todo %headline")
  (setq org-timed-alert-warning-string (concat "%todo %headline\n at %alert-time\n "
                                          "it is now %current-time\n "
                                          "*THIS IS YOUR %warning-time MINUTE WARNING*"))
  (add-hook! 'org-mode-hook #'org-timed-alerts-mode))
#+end_src

Set up alert intervals
#+begin_src emacs-lisp
(setq org-alert-interval 300
      org-alert-notify-cutoff 10
      org-alert-notify-after-event-cutoff 10)
#+end_src
Add hook to run after org-mode runs

#+begin_src emacs-lisp
(org-alert-enable)
(org-alert-check)
#+end_src
*** Modern Org
Enable it globally
#+begin_src emacs-lisp
(with-eval-after-load 'org (global-org-modern-mode))
#+end_src

Config, mostly defaults since it looks good enough.
#+begin_src emacs-lisp
(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "â€¦"

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?â”€
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " â”„â”„â”„â”„â”„ " "â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„")
 org-agenda-current-time-string
 "â—€â”€â”€ now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")
#+end_src
*** Misc related functions for org mode
****  Time Stamp updater
#+begin_src emacs-lisp
(defun update-timestamps (directory)
  "Update timestamps in all org files in DIRECTORY."
  (interactive "DDirectory: ")
  (let ((files (directory-files-recursively directory "\\.org$")))
    (dolist (file files)
      (with-current-buffer (find-file-noselect file)
        (save-excursion
          (goto-char (point-min))
          (time-stamp))))))

(defun update-timestamps-in-directory (directory)
  "Update timestamps in all org files in DIRECTORY."
  (let ((files (directory-files-recursively directory "\\.org$")))
    (dolist (file files)
      (with-current-buffer (find-file-noselect file)
        (save-excursion
          (goto-char (point-min))
          (time-stamp))))))

#+end_src

* Package Config
** Magit
*** magit-clone
Function to use the current clipboard as path to clone[fn:2]
#+begin_src emacs-lisp
(defun ar/git-clone-clipboard-url ()
  "Clone git URL in clipboard asynchronously and open in dired when finished."
  (interactive)
  (require 'cl-lib)
  (let ((url (current-kill 0))
        (download-dir (read-directory-name "Path to git clone: " default-directory))
        (magit-clone-set-remote.pushDefault t))
    (magit-clone-internal url download-dir '())))
#+end_src
*** Keys
Override magit-clone

#+begin_src emacs-lisp
(map! :leader
      :map 'magit-mode-map
      (:prefix-map ("g" . "git")
      :desc "Clone a Repo" "R" #'ar/git-clone-clipboard-url))
#+end_src

Set keybinds for pushing to remote
Pushes the current branch to the remote
(eg: local master > remote master)
#+begin_src emacs-lisp
(map! :leader
      :desc "Push Current branch to remote branch"
      "g p P" #'magit-push-current-to-pushremote)
#+end_src

Same as above but for pulling from remote
#+begin_src emacs-lisp
(map! :leader
      :desc "Pull current branch from remote"
      "g p p" #'magit-pull-from-pushremote)
#+end_src

Create a new tag
#+begin_src emacs-lisp
(map! :leader
      :map 'magit-mode-map
      (:prefix-map ("g" . "git")
       (:prefix ("c" . "create")
      :desc "Create new git tag" "t" #'magit-tag-create)))

#+end_src
*** Magit Todos
Show todos!
#+begin_src emacs-lisp
(require 'magit-todos)
#+end_src

*** Magit Forges
Magit forges allow you to interact with the online git repositoes like github, gitea and gitlab. They are named "forges".
#+begin_src emacs-lisp
(after! 'magit
  (require 'forge))
#+end_src
** Projectile
Setting the path to find projects
I store my stuff in ~/Documents/Projects
#+begin_src emacs-lisp
(setq projectile-project-search-path
      '(("~/Documents/Projects" . 1)))
#+end_src

** Deft
Deft is used for notes. here im setting the default directory
#+begin_src emacs-lisp
(setq deft-extenstions '("txt", "org", "md"))
(setq deft-directory "~/Documents/Notes")
#+end_src

Deft is not recursive by defualt (it will not go into sub directories)
#+begin_src emacs-lisp
(setq deft-recursive t)
#+end_src
Tell deft to use the filename as the Title of the note
#+begin_src emacs-lisp
(setq deft-use-filename-as-title t)
#+end_src

** Notifications
*** Emacs built in notifications
#+begin_src emacs-lisp
(require 'notifications)
#+end_src

** RSS (Elfeed)
#+begin_src emacs-lisp
(require 'elfeed-org)
#+end_src
Hook elfeed-org to elfeed
#+begin_src emacs-lisp
(elfeed-org)
#+end_src

Tell elfeed where to look for org mode files

#+begin_src emacs-lisp
(setq rmh-elfeed-org-files '("~/Documents/Notes/org/rss.org"))
#+end_src

Disable evil for elfeed.
#+begin_src emacs-lisp
(add-hook 'elfeed-search-mode-hook 'turn-off-evil-mode)
(add-hook 'elfeed-show-mode-hook 'turn-off-evil-mode)
#+end_src


** Web-paste
Web-paste allows you to paste text to pastebin like web services
#+begin_src emacs-lisp
(require 'webpaste)
#+end_src

Tell Web-paste to confirm before upload
#+begin_src emacs-lisp
(setq webpaste-paste-confirmation t)
#+end_src

Provider priority
#+begin_src emacs-lisp
(setq webpaste-provider-priority '("ix.io" "dpaste.org"
                                   "dpaste.com" "clbin.com"
                                   "0x0.st" "bpa.st"
                                   "paste.rs"))
#+end_src

Setting Key binds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix ("p" . "webpaste")
        :desc "paste region to a paste service" "r" #'webpaste-paste-region
        :desc "paste entire buffer to paste service" "b" #'webpaste-paste-buffer)))
#+end_src

** Pcap mode
You can view a pcap file with tshark

#+begin_src emacs-lisp
(require 'pcap-mode)
#+end_src

** inherit org
inherit-org: Inherit org faces to non-org buffers.
#+begin_src emacs-lisp

;; (with-eval-after-load 'org
;;   (require 'inherit-org)
;; ; BUG something is wrong with spc h f on nixos, works on arch
;;   ;(with-eval-after-load 'info
;;   ;  (add-hook 'Info-mode-hook 'inherit-org-mode))

;;   ; BUG?
;;   ;(with-eval-after-load 'helpful
;;   ;  (add-hook 'helpful-mode-hook 'inherit-org-mode))

;;   (with-eval-after-load 'w3m
;;     (add-hook 'w3m-fontify-before-hook 'inherit-org-w3m-headline-fontify) ;only one level is supported
;;     (add-hook 'w3m-fontify-after-hook 'inherit-org-mode)))
#+end_src

** W3M

fix text area
#+begin_src emacs-lisp
(eval-after-load "w3m-form"
  '(progn
     (define-minor-mode dme:w3m-textarea-mode
       "Minor mode used when editing w3m textareas."
       nil " dme:w3m-textarea" w3m-form-input-textarea-keymap)
     (defun dme:w3m-textarea-hook ()
                                        ; protect the form local variables from being killed by `text-mode'
       (mapcar (lambda (v)
		 (if (string-match "^w3m-form-input-textarea.*"
				   (symbol-name (car v)))
		     (put (car v) 'permanent-local t)))
	       (buffer-local-variables))
       (text-mode)
       (dme:w3m-textarea-mode))
     (add-hook! 'w3m-form-input-textarea-mode-hook 'dme:w3m-textarea-hook)))
#+end_src
** Vterm
its a good term

set the window title
#+begin_src emacs-lisp
(defun vterm--rename-buffer-as-title (title)
  (let ((dir (string-trim-left (concat (nth 1 (split-string title ":")) "/"))))
    (cd-absolute dir)
    (rename-buffer (format "term %s" title))))
(add-hook 'vterm-set-title-functions 'vterm--rename-buffer-as-title)
#+end_src

*** Tmux
#+begin_src emacs-lisp
(defun nsa/tmux-vterm (arg)
  "Start a new tmux session or switch to one in vterm."
      (interactive "sSession: ")

  (let ((buffer-name (format "*tmux-%s*" arg)))

    (unless (get-buffer buffer-name)
      (with-current-buffer (get-buffer-create buffer-name)
        (vterm-mode)
        (vterm-send-string (format  "tmux new -s %s || tmux a -s %s" arg arg))
        (vterm-send-return)))
    (switch-to-buffer buffer-name)))
#+end_src
** Dired
*** exec in dired
Run executable from within dired.

Internally to my head, =C-c C-c= is the same as the org-babel, so it makes since to use is
#+begin_src emacs-lisp
(defun nsa/dired-exec ()
  "Run the script under point in Dired mode, prompting for arguments."
  (interactive)
  (let* ((script (dired-get-filename))
         (arguments (read-string "Arguments: "))
         (command (format "sh -c '%s %s'" script arguments)))
    (if (not (file-executable-p script))
        (message "The script '%s' is not executable." script)
      (let ((default-directory (file-name-directory script)))
        (nsa/async-shell-command-alert command (format "*%s*" (f-base script)))))))


(define-key dired-mode-map (kbd "C-c C-c") 'nsa/dired-exec)
#+end_src
*** Dirvish
a better dired
#+begin_src emacs-lisp
;; (require 'dirvish)
;; (dirvish-override-dired-mode)
#+end_src

#+begin_src emacs-lisp
;; (use-package! dirvish
;;   :init
;;   (dirvish-override-dired-mode)
;;   :custom
;;   (dirvish-quick-access-entries        ; It's a custom option, `setq' won't work
;;    '(("h" "~/"                          "Home")
;;      ("d" "~/Downloads/"                "Downloads")
;;      ("s" "/mnt/share"                       "Share Drive")
;;      ("t" "~/.local/share/Trash/files/" "TrashCan")))
;;   :config
;;   (dirvish-peek-mode)                   ; Preview files in minibuffer
;;   ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
;;   (setq dirvish-mode-line-format
;;         '(:left (sort symlink) :right (omit yank index)))
;;   (setq dirvish-attributes
;;         '(vc-state subtree-state all-the-icons collapse git-msg file-time file-size))
;;   (setq delete-by-moving-to-trash t)
;;   (setq dired-listing-switches
;;         "-l --almost-all --human-readable --group-directories-first --no-group")
;;   (setq dirvish-preview-dispatchers '(image gif video audio epub archive pdf text))
;;   :bind                ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
;;   (("C-c f" . dirvish-fd)
;;    :map dirvish-mode-map                ; Dirvish inherits `dired-mode-map'
;;    ("a"   . dirvish-quick-access)
;;    ("f"   . dirvish-file-info-menu)
;;    ("y"   . dirvish-yank-menu)
;;    ("N"   . dirvish-narrow)
;;    ("^"   . dirvish-history-last)
;;    ("h"   . dirvish-history-jump)       ; remapped `describe-mode'
;;    ("s"   . dirvish-quicksort)          ; remapped `dired-sort-toggle-or-edit'
;;    ("v"   . dirvish-vc-menu)            ; remapped `dired-view-file'
;;    ("TAB" . dirvish-subtree-toggle)
;;    ("M-f" . dirvish-history-go-forward)
;;    ("M-b" . dirvish-history-go-backward)
;;    ("M-l" . dirvish-ls-switches-menu)
;;    ("M-m" . dirvish-mark-menu)
;;    ("M-t" . dirvish-layout-toggle)
;;    ("M-s" . dirvish-setup-menu)
;;    ("M-e" . dirvish-emerge-menu)
;;    ("M-j" . dirvish-fd-jump)))

#+end_src

**** Dirvish setup with Tramp[fn:4]
#+begin_src emacs-lisp
;; (use-package tramp
;;   :config
;;   ;; Enable full-featured Dirvish over TRAMP on certain connections
;;   ;; https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes-1.
;;   (add-to-list 'tramp-connection-properties
;;                (list (regexp-quote "/ssh:YOUR_HOSTNAME:")
;;                      "direct-async-process" t))
;;   ;; Tips to speed up connections
;;   (setq tramp-verbose 0)
;;   (setq tramp-chunksize 2000)
;;   (setq tramp-use-ssh-controlmaster-options nil))
#+end_src
** Atomic Chrome/Firefox
Edit text areas in your web browser within emacs!

I want it to open a new frame
#+begin_src emacs-lisp
(setq atomic-chrome-buffer-open-style 'frame)
#+end_src
Make sure to start atomic chrome at emacs startup.
#+begin_src emacs-lisp
(add-hook 'after-init-hook #'atomic-chrome-start-server)
#+end_src
** shell commands
I defined a function to run dunstify to send an alert when it is done.

Here I bind it to a key.
#+begin_src emacs-lisp
(bind-key "M-&" #'nsa/async-shell-command-alert)
#+end_src

** Eshell
Eshell is a emacs lisp based shell, which is powerful. After vterm broke on my nixos dotfiles i have now fully commited to eshell.
If i cant run it in eshell i have a terminal dropdown for it.

Set the aliases file. Doom already sets this but i will do so again incase i want to change it.
#+begin_src emacs-lisp
(setq eshell-aliases-file "~/.doom.d/eshell/aliases")
#+end_src

Ensure Auto complete is running and ensure correct company backend is running
#+begin_src emacs-lisp
(set-company-backend! 'eshell-mode
           	'(company-files))
(add-hook 'eshell-mode-hook #'eshell-cmpl-initialize)

#+end_src
** Tramp
#+begin_src emacs-lisp
(require 'tramp-sh)
(setq tramp-remote-path
      (append tramp-remote-path
        '(tramp-own-remote-path)))
#+end_src
** GPTEL

#+begin_src emacs-lisp
(use-package! gptel
  :config
  (setq gptel-model "Orenguteng/Llama-3-8B-Lexi-Uncensored-GGUF")
  (setq gptel-backend (gptel-make-openai "Ollama Uncensored"
                        :stream t
                        :protocol "http"
                        :host "localhost:1234"
                        :models '("Orenguteng/Llama-3-8B-Lexi-Uncensored-GGUF"))))

#+end_src
** Skeletor
Skeletor is a project template package.

#+begin_src emacs-lisp
(require 'skeletor)
(setq skeletor-user-directory "~/.dotfiles/Templates/")
#+end_src

Some common substitions

#+begin_src emacs-lisp
(add-to-list 'skeletor-global-substitutions
             (cons "__HOME__" (getenv "HOME")))

(add-to-list 'skeletor-global-substitutions
             (cons "__COPYRIGHT__" (lambda () (format "nsaspy %s" (format-time-string "%c")))))
(add-to-list 'skeletor-global-substitutions
             (cons "__TIME__" (lambda () (format-time-string "%c"))))
#+end_src

*** Project Templates
**** SBCL
#+begin_src emacs-lisp
(defun nsa/init-git-project (dir)
  (let ((default-directory dir))
    (envrc-allow)))

(skeletor-define-template "sbcl-project" :title "Common Lisp (SBCL)"
                          :after-creation (lambda (dir)
                                            (nsa/init-git-project dir)))
#+end_src
* Libraries :lib::programming::lisp:
*** f.el :lisp:
Much inspired by @magnarss excellent s.el and dash.el, f.el is a modern API for working with files and directories in Emacs.
#+begin_src emacs-lisp
(require 'f)
#+end_src
*** dash.el :lisp:
A modern list API for Emacs. No 'cl required.

#+begin_src emacs-lisp
(require 'dash)
#+end_src
*** s.el :lisp:
The long lost Emacs string manipulation library.
#+begin_src emacs-lisp
(require 's)
#+end_src


* Programming

This section would not fit well, therefor it is in its own.
** Codeium AI power completions
<2023-11-07 Tue> I might remove this if i never use it.
#+begin_src emacs-lisp
;; (use-package codeium                    ;
;;     ;; if you use straight
;;     ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
;;     ;; otherwise, make sure that the codeium.el file is on load-path

;;     :init
;;     ;; use globally
;;     ;(add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
;;     ;; or on a hook
;;     (add-hook 'python-mode-hook
;;          (lambda ()
;;              (setq-local completion-at-point-functions '(codeium-completion-at-point))))

;;     ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local completion-at-point-functions
;;     ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
;;     ;; an async company-backend is coming soon!

;;     ;; codeium-completion-at-point is autoloaded, but you can
;;     ;; optionally set a timer, which might speed up things as the
;;     ;; codeium local language server takes ~0.2s to start up
;;     ;; (add-hook 'emacs-startup-hook
;;     ;;  (lambda () (run-with-timer 0.1 nil #'codeium-init)))

;;     ;; :defer t ;; lazy loading, if you want
;;     :config
;;     (setq use-dialog-box nil) ;; do not use popup boxes

;;     ;; if you don't want to use customize to save the api-key
;;     ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

;;     ;; get codeium status in the modeline
;;     (setq codeium-mode-line-enable
;;         (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
;;     (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
;;     ;; alternatively for a more extensive mode-line
;;     ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

;;     ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
;;     (setq codeium-api-enabled
;;         (lambda (api)
;;             (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
;;     ;; you can also set a config for a single buffer like this:
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local codeium/editor_options/tab_size 4)))

;;     ;; You can overwrite all the codeium configs!
;;     ;; for example, we recommend limiting the string sent to codeium for better performance
;;     (defun my-codeium/document/text ()
;;         (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
;;     ;; if you change the text, you should also change the cursor_offset
;;     ;; warning: this is measured by UTF-8 encoded bytes
;;     (defun my-codeium/document/cursor_offset ()
;;         (codeium-utf8-byte-length
;;             (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
;;     (setq codeium/document/text 'my-codeium/document/text)
;;     (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))
#+end_src
** Python

Set the exec path for pyright
#+begin_src emacs-lisp
(setq lsp-package-path (executable-find "pyright"))
#+end_src
** Direnv
Make life easy!
#+begin_src emacs-lisp
(envrc-global-mode)
#+end_src

** Nix
Nix is a language that allows for reproducible declarative systems/packages.
Add nixos-options to company backend
#+begin_src emacs-lisp
;(add-to-list 'company-backends 'company-nixos-options)
#+end_src

Update the rev and sha of a fetchgit package

#+begin_src emacs-lisp
;; Disabled: [2024-08-02 Fri] Not sure i ever used it after a few uses.
;; (require 'nix-update)
;; (map! :localleader
;;       :after nix
;;       :map nix-mode-map
;;       :prefix ("u" . "update")
;;       :desc "Update fetchgit" "g" #'nix-update-fetch)

#+end_src

#+begin_src emacs-lisp
;; (setq flycheck-command-wrapper-function
;;         (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
;;       flycheck-executable-find
;;         (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))
#+end_src
** Nim
FlyCheck nim
Does this even do anything?
#+begin_src emacs-lisp
;(require 'flycheck-nim)
#+end_src

hook lsp to nim lsp
[[https://gist.github.com/cyraxjoe/9001fcc5d2de0669d7e0d27f7a49ee90][source]], [[https://www.reddit.com/r/nim/comments/dr0ph0/setting_up_nimlsp_in_emacs/][reddit comment]].
#+begin_src emacs-lisp
;(require 'lsp-mode)
;(add-to-list 'lsp-language-id-configuration '(nim-mode . "nim"))
;(lsp-register-client
; (make-lsp-client :new-connection (lsp-stdio-connection "nimlsp")
;                  :major-modes '(nim-mode)
;                  :server-id 'nimlsp))
;(add-hook 'nim-mode-hook #'lsp)
#+end_src


** Forth
Load forth mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.fs" . 'forth-mode))
#+end_src
** Lisp
*** Evil Smartparans
Evil smartparens is a minor mode which makes evil play nice with smartparens.
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode)
(add-hook 'common-lisp-mode #'evil-smartparens-mode)
#+end_src


*** Templates
Template for [[https://gitlab.common-lisp.net/asdf/asdf][ASDF]] system def.
#+begin_src emacs-lisp
(set-file-template! "\\.asd" :trigger "__.asd" :mode 'lisp-mode)
#+end_src

Package Def snippet
#+begin_src emacs-lisp
(set-file-template! "\\package.lisp" :trigger "__package.lisp" :mode 'lisp-mode)
#+end_src
*** LispyVille Keybinds
#+begin_src emacs-lisp


(map! :after 'lispyville
      :map 'lispyville-mode-map
      "C-w" #'lispyville-move-up)
(map! :after 'evil
      :map 'lispyville-mode-map
      "C-s" #'lispyville-move-down)
#+end_src
*** Defstar
Defstar is a type declaration macro for common lisp
#+begin_src emacs-lisp
(put 'defvar*   'doc-string-elt 3)
(put 'defparameter*   'doc-string-elt 3)
(put 'lambda*   'doc-string-elt 2)

(defvar *lisp-special-forms*
(regexp-opt '("defvar*"
              "defconstant*"
              "defparameter*"
              "defgeneric*"
              "defmethod*"
              "lambda*"
              "flet*"
              "labels*") 'words))
(font-lock-add-keywords 'lisp-mode
  `((,*lisp-special-forms* . font-lock-keyword-face)))
#+end_src

** Flycheck
Check for errors!

#+begin_src emacs-lisp
(use-package! flycheck-package
  :after flycheck
  :config (flycheck-package-setup))
#+end_src

** Dumb Jump
When/If i leave doom ill need to configure it.
A Jump to definition package. [[https://github.com/jacktasia/dumb-jump][Github]].

Enable the xref back-end.
#+begin_src emacs-lisp
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src

* Misc
** Environment

Sets PATH
#+begin_src emacs-lisp
;;(when (memq window-system '(mac ns x))
;;  (exec-path-from-shell-initialize))
#+end_src
** Url proxy
I use i2p and having elfeed use a proxy would be nice
#+begin_src emacs-lisp
;(setq url-proxy-services
;   '(("no_proxy" . "^\\(localhost\\|10.*\\|\\.(?!i2p)[a-zA-Z0-9-]{1,255}$\\)")
;     ("http" . "127.0.0.1:4444")
;     ("https" . "127.0.0.1:4444")
;))
;(setq elfeed-use-curl nil)
#+end_src
** Cheat-sh
#+begin_src emacs-lisp
(defun open-popup-on-side-or-below (buffer &optional alist)
  (+popup-display-buffer-stacked-side-window-fn
   buffer (append `((side . ,(if (one-window-p)
                                 'right
                               'bottom)))
                  alist)))

(add-to-list 'display-buffer-alist
  (cons "*cheat.sh*" (cons #'open-popup-on-side-or-below nil)))
(map! :leader
      :prefix ("s" . "search")
      :desc "cheat sheat" "c" #'cheat-sh)
#+end_src


** Bookmarks
#+begin_src emacs-lisp
(setq bookmark-file "~/Documents/Emacs/bookmarks")
#+end_src

** Activity Watch
#+begin_src emacs-lisp
(global-activity-watch-mode)
#+end_src

** Games
Stuff that i use for games are here.

*** Kerbal Space Program
#+begin_src emacs-lisp
(require 'ks)
#+end_src
** Social Media
*** Mastodon.el
#+begin_src emacs-lisp
    (setq mastodon-instance-url "https://pleroma.nobodyhasthe.biz"
          mastodon-active-user "nott")

#+end_src
*** Discord rich presence
So i can brag about coding all the time lol.
I only use it on the desktop so only load it there.
#+begin_src emacs-lisp
(with-system "flake"
             (require 'elcord)
             (elcord-mode))
#+end_src
** Spell check
Make sure its using aspell
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
#+end_src
Set dictionary
#+begin_src emacs-lisp
(setq ispell-dictionary "en")
#+end_src

Set personal dictionary
#+begin_src emacs-lisp
 (setq ispell-personal-dictionary "~/.aspell.en_us.pws")
#+end_src

Spell fu setup

#+begin_src emacs-lisp
(add-hook 'spell-fu-mode-hook
  (lambda ()
    (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "en"))
    (spell-fu-dictionary-add
      (spell-fu-get-personal-dictionary "en-personal" "~/.aspell.en_us.pws"))))
#+end_src
** Midnight mode
Clean up emacs overnight
require it
#+begin_src emacs-lisp
(require 'midnight)
#+end_src
Set the time to 7 am local
#+begin_src emacs-lisp
(midnight-delay-set 'midnight-delay "07:00am")
#+end_src

Ensure a desktop notification is made indicating that the buffers will be cleared as a result of midnight mode being ran.
#+begin_src emacs-lisp
(add-hook 'midnight-hook #'(lambda ()
                             (alert "Midnight mode is running.\nEmacs is fresh and clean again!")))
#+end_src

Make sure it is loaded
#+begin_src emacs-lisp
(add-hook 'after-init-hook #'midnight-mode)
#+end_src

** Multi media
*** Elfeed-tube
#+begin_src emacs-lisp
(use-package! elfeed-tube
  :ensure t ;; or :straight t
  :after elfeed
  :demand t
  :config
  ;; (setq elfeed-tube-auto-save-p nil) ; default value
  ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
  (elfeed-tube-setup)
  :bind (:map elfeed-show-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))
#+end_src
* Security
** Auth info source
Tell auth info to put authsource in my dotfiles
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry 1360)
#+end_src

** Hackmode

Pentest utils from emacs
This also makes for a good example config

#+begin_src emacs-lisp
(require 'hackmode) ;load it
(setq hackmode-dir "~/Documents/hackmode") ;set the path to the directory where you working dirs will be stored
(setq hackmode-templates "~/.dotfiles/hackmode") ; Path to directory holding templates
(setq hackmode-tools-dir (f-join hackmode-dir "~/Documents/hackmode-tools/")) ;; this is the path to the directory where tools can be placed in that will be loaded into your $PATH.
#+end_src

Hackmode Checklists
#+begin_src emacs-lisp
(setq hackmode-checklists '(("Program overview" . "/home/unseen/Documents/Notes/org/roam/hacking/20231107093523-bug_bounty_methods.org") ("Url" . "/home/unseen/Templates/hackmode/url.org") ("Account Takeover" . "/home/unseen/Templates/hackmode/account-take-over.org")))
#+end_src

**** TODO Merge with hackmode
Temp addon to hackmode
#+begin_src emacs-lisp
(after! hackmode
(defun hackmode-capture ()
  "Capture data!"
  (interactive)
  (let ((org-capture-templates (list


                                (list "t" "Tech" 'entry (list 'file+headline (f-join (hackmode-get-operation-path hackmode-operation) "findings.org") "Tech")
                                      "* %t
                                        :PROPERTIES:
                                        :endpoint:
                                        :notes:
                                        :tech:
                                        :tags:
                                        :END:")
                                (list "b" "Bug" 'entry (list 'file+headline (f-join (hackmode-get-operation-path hackmode-operation) "findings.org") "Bugs")
                                      "* %t
                                        :PROPERTIES:
                                        :endpoint:
                                        :notes:
                                        :type:
                                        :score:
                                        :END:")
                                (list "i" "Interesting enpoint" 'entry (list 'file+headline (f-join (hackmode-get-operation-path hackmode-operation) "findings.org") "Interesting Endpoints")
                                      "* %t
                                        :PROPERTIES:
                                        :endpoint:
                                        :notes:
                                        :tags:
                                        :END:")))
        (org-directory (hackmode-get-operation-path hackmode-operation)))
    (call-interactively #'org-capture))))

#+end_src
* Personal Lisp packages
** Ppackage
Simple utility to create local lisp code
#+begin_src emacs-lisp
(setq ppackage-template "~/.dotfiles/lisp/template")
(setq ppackage-path "~/.dotfiles/lisp")
#+end_src
** yt-dlp.el
A simple wraper for yt-dlp a youtube-dl fork that still works.

#+begin_src emacs-lisp
(setq nsa/music-dir "~/Music/Music-inbox")
#+end_src

* System Wide
** Project Tasks
This is a simple way of running tasks for a project.
Simply put a tasks.org file in the project root and make sure the src block has a NAME.
#+begin_src emacs-lisp
(require 'project-tasks)
#+end_src
** Exwm
Only load when its actually exwm
#+begin_src emacs-lisp
;(require 'persp-mode)
#+end_src
** EZF fzf but emacs
I really like fzf but i also want the options to use emacs when I can.[fn:5]
#+begin_src emacs-lisp
(defun ezf-default (filename)
  "EZF completion with your default completion system."
  (completing-read-multiple
   "Pick a Candidate: "
   (with-temp-buffer
     (insert-file-contents-literally filename nil)
     (string-lines (buffer-string) t))))


(defvar ezf-separators " "
  "Regexp of separators `ezf' should use to split a line.")

(defun ezf (filename &optional field completing-fn)
  "Wrapper that calls COMPLETION-FN with FILENAME.

Optionally split each line of string by `ezf-separators' if FIELD
is non-nil and return FIELD.

If COMPLETING-FN is nil default to `ezf-default'."
  (when-let (candidates (funcall (or completing-fn 'ezf-default) filename))
    (mapconcat (lambda (candidate)
                 (shell-quote-argument
                  (if field
                      (nth (1- field) (split-string candidate ezf-separators t " "))
                    candidate)))
               candidates
               " ")))

#+end_src

* Macros
** Frame macros
Spawn a new window
#+begin_src emacs-lisp
(fset 'nsa/spawn-window
   (kmacro-lambda-form [?  ?w ?v ?  ?w ?l ?  ?w ?T] 0 "%d"))
#+end_src
* Footnotes

[fn:5] https://www.masteringemacs.org/article/fuzzy-finding-emacs-instead-of-fzf
[fn:4] https://github.com/alexluigit/dirvish/blob/main/docs/CUSTOMIZING.org#tramp-integration
[fn:3] https://github.com/jwiegley/alert/issues/91
[fn:2] https://www.reddit.com/r/emacs/comments/k3iter/comment/ge4pn9w/?utm_source=share&utm_medium=web2x&context=3
[fn:1] https://www.reddit.com/r/emacs/comments/e7h3qw/comment/fa0k4c5

