#+TITLE: Doom Emacs configuration
#+AUTHOR: nsaspy
#+PROPERTY: header-args :emacs-lisp tangle: ./config.el :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+DISABLE_SPELLCHECKER: t
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

#+end_src
* TODO update config [1/4]
- [X] add pcap-mode
- [ ] add desktop notifcations
- [ ] Add theme toggle
- [ ] Replace org-agenda views with org super agenda


* Styling
** Theme
I like doom's outrun eletric theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Packages
** Magit
Set keybind for pushing to remote
Pushes the current branch to the remote
(eg: local master > remote master)
#+begin_src emacs-lisp
(map! :leader
      :desc "Push Current branch to remote branch"
      "g p P" #'magit-push-current-to-pushremote)
#+end_src

Same as above but for pulling from remote
#+begin_src emacs-lisp
(map! :leader
      :desc "Pull current branch from remote"
      "g p p" #'magit-pull-from-pushremote)
#+end_src
*** Magit Todos
Show todos!
#+begin_src emacs-lisp
(require 'magit-todos)
#+end_src
** Projectile
Setting the path to find projects
I store my stuff in ~/Documents/Projects
#+begin_src emacs-lisp
(setq projectile-project-search-path
      '(("~/Documents/Projects" . 1)))
#+end_src

** Org Mode
Setting org dir
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/org")
#+end_src

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'time-stamp)
#+end_src


*** Org Agenda

Find all TODOS recursively [[https://stackoverflow.com/a/41969519][source]].
#+begin_src emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/Documents/Notes/" "\\.org$"))
#+end_src

#+begin_src emacs-lisp
(defun org-agenda-update-files ()
  "Update the org-agenda-files"
  (interactive)
  (setq org-agenda-files (directory-files-recursively "~/Documents/Notes/" "\\.org$")))
(map! :leader
      :desc "update agenda"
      "o a u" #'org-agenda-update-files)


#+end_src



I prefer being able to have difrent views within org agenda, so i can see whats comming up ahead of time.
#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to week view"
      "o a w" #'org-agenda-week-view)

(map! :leader
      :desc "switch to month view"
      "o a m" #'org-agenda-month-view)

(map! :leader
      :desc "switch to month view"
      "o a y" #'org-agenda-year-view)
#+end_src

**** Org super agenda
***** TODO adapt this
#+begin_src emacs-lisp
(let ((org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "Important"
                ;; Single arguments given alone
                :tag "bills"
                :priority "A")
         ;; Set order of multiple groups at once
         (:order-multi (2 (:name "Shopping in town"
                                 ;; Boolean AND group matches items that match all subgroups
                                 :and (:tag "shopping" :tag "@town"))
                          (:name "Food-related"
                                 ;; Multiple args given in list with implicit OR
                                 :tag ("food" "dinner"))
                          (:name "Personal"
                                 :habit t
                                 :tag "personal")
                          (:name "Space-related (non-moon-or-planet-related)"
                                 ;; Regexps match case-insensitively on the entire entry
                                 :and (:regexp ("space" "NASA")
                                               ;; Boolean NOT also has implicit OR between selectors
                                               :not (:regexp "moon" :tag "planet")))))
         ;; Groups supply their own section names when none are given
         (:todo "WAITING" :order 8)  ; Set order of this section
         (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                ;; Show this group at the end of the agenda (since it has the
                ;; highest number). If you specified this group last, items
                ;; with these todo keywords that e.g. have priority A would be
                ;; displayed in that group instead, because items are grouped
                ;; out in the order the groups are listed.
                :order 9)
         (:priority<= "B"
                      ;; Show this section after "Today" and "Important", because
                      ;; their order is unspecified, defaulting to 0. Sections
                      ;; are displayed lowest-number-first.
                      :order 1)
         ;; After the last group, the agenda will display items that didn't
         ;; match any of these groups, with the default order position of 99
         )))
  (org-agenda nil "a"))
#+end_src




*** Babel
Tangle a file
#+begin_src emacs-lisp
(map! :leader
          :desc "Tangle a file"
          "b t" #'org-babel-tangle)
#+end_src

Execute the selected source block (used for literate programming)
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute selected source block"
      "c b" #'org-babel-execute-src-block)

#+end_src

Execute all src blocks in buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute buffer"
      "c B" #'org-babel-execute-buffer)
#+end_src

Add languages to org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t) (org . t) (nim . t) (python . t) (erlang . t) (ein . t)))
#+end_src
*** Org Tempo templates
I expirment with difrent languages, org babel makes things easy.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("nim" . "src nim"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src common-lisp"))
  (add-to-list 'org-structure-template-alist '("nix" . "src nix")))
#+end_src

*** TODO Org Mode config
Create a function to tangle and sync doom at the same time

*** org-download
This extension facilitates moving images from point A to point B.

#+begin_src emacs-lisp
(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src


Configure keybinds. this will be under `SPC m a `
#+begin_src emacs-lisp
(map! :localleader
      :after org
      :map org-mode-map
       :prefix ("a" . "attachments")
        :desc "paste image" "p" #'org-download-clipboard
        :desc "insert image from url" "i" #'org-download-yank)
#+end_src


*** Org Roam
A Personal wiki

Set roam directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/Notes/org/roam")
#+end_src

Set a daily capture format
#+begin_src emacs-lisp
(setq  org-roam-capture-templates '(
        ("D" "daily entry" entry (function org-roam--capture-get-point)
          "* %<%I:%M %p>: %?"
           :file-name "%<%Y-%m-%d-%H%M%S>-${slug}"
           :head "#+TITLE: ${title} "
           :unnarrowed t)
        ("u" "url" entry (function org-roam--capture-get-point)
          "* %?\n- Comment: "
          :file-name "references/%<%Y-%m-%d-%H%M%S>-${slug}"
          :head "#+TITLE: ${title}"
          :unnarrowed t)
       
       ("t" "do today" item
           #'org-roam-capture--get-point
           "[ ] %(princ as/agenda-captured-link)"
           :file-name "daily/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d (%A)>\n* [/] Do Today\n* [/] Maybe Do Today\n* Journal\n"
           :olp ("Do Today")
           :immediate-finish t))
       )
#+end_src

#+RESULTS:
| D | daily entry | entry | #'org-roam--capture-get-point | * %<%I:%M %p>: %? | :file-name | %<%Y-%m-%d-%H%M%S>-${slug} | :head | #+TITLE: ${title} | :unnarrowed | t |
| u | url         | entry | #'org-roam--capture-get-point | * %?              |            |                            |       |                   |             |   |


url2org function fro importing info from the web

#+begin_src emacs-lisp
(defun url2org (begin end)
  "Download a webpage from selected url and convert to org."
  (interactive "r")
  (shell-command-on-region begin end
    (concat "pandoc --from=html --to=org " (buffer-substring begin end))
   nil t))
#+end_src




*** Org File Encryption

Eyes off my doccuments
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
#+end_src


#+begin_src emacs-lisp
(setq epa-file-select-keys "235327FBDEFB3719")
#+end_src





** Yasnippet
Add a new template
#+begin_src emacs-lisp
(map! :leader
      :desc "Add a neew template to yasnippet"
      "a y s" #'+snippets/new)
#+end_src

Edit a template
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit template"
      "a y e" #'+snippets/find)
#+end_src

** Deft
Deft is used for notes. here im setting the default directory
#+begin_src emacs-lisp
(setq deft-extenstions '("txt", "org", "md"))
(setq deft-directory "~/Documents/Notes")
#+end_src

Deft is not recursive by defualt (it will not go into sub directories)
#+begin_src emacs-lisp
(setq deft-recursive t)
#+end_src
Tell deft to use the filename as the Title of the note
#+begin_src emacs-lisp
(setq deft-use-filename-as-title t)
#+end_src

** Notifications
#+begin_src emacs-lisp
(require 'notifications)
#+end_src
** RSS (Elfeed)
#+begin_src emacs-lisp
(require 'elfeed-org)
#+end_src
Hook elfeed-org to elfeed
#+begin_src emacs-lisp
(elfeed-org)
#+end_src
Tell elfeed where to look for org mode files

#+begin_src emacs-lisp
(setq rmh-elfeed-org-files '("~/Documents/Notes/org/rss.org"))
#+end_src


** Webpaste
Webpaste allows you to paste text to pastebin like web services
#+begin_src emacs-lisp
(require 'webpaste)
#+end_src

Tell Webpaste to confirm before upload
#+begin_src emacs-lisp
(setq webpaste-paste-confirmation t)
#+end_src

Provider priority
#+begin_src emacs-lisp
(setq webpaste-provider-priority '("ix.io" "dpaste.org"
                                   "dpaste.com" "clbin.com"
                                   "0x0.st" "bpa.st"
                                   "paste.rs"))
#+end_src



Setting Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix ("p" . "webpaste")
        :desc "paste region to a paste service" "r" #'webpaste-paste-region
        :desc "paste entire buffer to paste service" "b" #'webpaste-paste-buffer)))
#+end_src

**  Pcap mode
You can view a pcap file with tshark

#+begin_src emacs-lisp
(require 'pcap-mode)
#+end_src

** inherit org
inherit-org: Inherit org faces to non-org buffers.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'inherit-org)

  (with-eval-after-load 'info
    (add-hook 'Info-mode-hook 'inherit-org-mode))

  (with-eval-after-load 'helpful
    (add-hook 'helpful-mode-hook 'inherit-org-mode))

  (with-eval-after-load 'w3m
    (add-hook 'w3m-fontify-before-hook 'inherit-org-w3m-headline-fontify) ;only one level is supported
    (add-hook 'w3m-fontify-after-hook 'inherit-org-mode)))
#+end_src

** W3M


fix textarea
#+begin_src emacs-lisp
 (eval-after-load "w3m-form"
  '(progn
     (define-minor-mode dme:w3m-textarea-mode
       "Minor mode used when editing w3m textareas."
       nil " dme:w3m-textarea" w3m-form-input-textarea-keymap)
     (defun dme:w3m-textarea-hook ()
       ; protect the form local variables from being killed by `text-mode'
       (mapcar (lambda (v)
		 (if (string-match "^w3m-form-input-textarea.*"
				   (symbol-name (car v)))
		     (put (car v) 'permanent-local t)))
	       (buffer-local-variables))
       (text-mode)
       (dme:w3m-textarea-mode))
     (add-hook! 'w3m-form-input-textarea-mode-hook 'dme:w3m-textarea-hook)))
#+end_src
* Programming

This section would not fit well, therefor it is in its own.

** Python

I Have problems with indent getting reset, i will explicitly set it.
#+begin_src emacs-lisp
(setq python-ident-offset 4)
#+end_src

Fix lsp not being found on nixos
#+begin_src emacs-lisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
#+end_src



** Direnv
Make life easy!
#+begin_src emacs-lisp
(envrc-global-mode)
#+end_src

** Nix
Nix is a language that allows for repoducible declarative systems/packages.

Search nixos options so i dont have to go the website
#+begin_src emacs-lisp
 (map! :leader
      :after nix
      :map nix-mode-map
       :prefix ("s" . "search")
        :desc "search option" "o" #'helm-nixos-options)
#+end_src

#+begin_src emacs-lisp
(setq flycheck-command-wrapper-function
        (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
      flycheck-executable-find
        (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))
#+end_src

** Nim
Flycheck
#+begin_src emacs-lisp
(require 'flycheck-nim)
#+end_src
* Misc
** Performance
Enable explain Pause mode

Alerts you when somthing takes some time (40ms)
disabled becuae I swear it causes me problems
#+begin_src emacs-lisp
(explain-pause-mode nil)
#+end_src

** Enviroment



Sets PATH
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Url proxy
I use i2p and having elfeed use a proxy would be nice
#+begin_src emacs-lisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "*.i2p:4444")))

#+end_src

** Puff Count
#+begin_src emacs-lisp
(defun puff-add ()
  "Add a puff"
  (interactive)
  (shell-command "/run/current-system/sw/bin/puffer -a"))
(map!
 :leader
 :desc "add a puff"
 "]" #'puff-add)
#+end_src

#+RESULTS:
: puff-add
** Cheat-sh
#+begin_src emacs-lisp

(defun cht-sh ()
  "look up a cheat"
  (interactive)
  (async-shell-command (format "cht.sh %s" (read-string "Enter search: "))))
 (map! :leader
       :prefix ("s" . "search")
        :desc "cheat sheat" "c" #'cht-sh)

#+end_src
*** TODO make it look nice


** Bookmarks
#+begin_src emacs-lisp
(setq bookmark-file "~/Documents/Emacs/bookmarks")
#+end_src
