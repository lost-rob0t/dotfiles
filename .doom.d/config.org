#+TITLE: Doom Emacs configuration
#+AUTHOR: nsaspy
#+PROPERTY: header-args :emacs-lisp tangle: ./config.el :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+DISABLE_SPELLCHECKER: t
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

#+end_src
* TODO update config [1/5]
- [ ] add pcap-mode
- [ ] add desktop notifcations
- [ ] Add theme toggle
- [ ] Replace org-adgenda views with org super agenda
- [X] add org-wiki insert-new at point function


* Styling
** Theme
I like doom's outrun eletric theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Packages
** Magit
Set keybind for pushing to remote
Pushes the current branch to the remote
(eg: local master > remote master)
#+begin_src emacs-lisp
(map! :leader
      :desc "Push Current branch to remote branch"
      "g p P" #'magit-push-current-to-pushremote)
#+end_src

Same as above but for pulling from remote
#+begin_src emacs-lisp
(map! :leader
      :desc "Pull current branch from remote"
      "g p p" #'magit-pull-from-pushremote)
#+end_src
** Projectile
Setting the path to find projects
I store my stuff in ~/Documents/Projects
#+begin_src emacs-lisp
(setq projectile-project-search-path
      '(("~/Documents/Projects" . 1)))
#+end_src

** Org Mode
Setting org dir
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/org")
#+end_src
*** Org Agenda views
I prefer being able to have difrent views within org agenda, so i can see whats comming up ahead of time.
#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to week view"
      "o a w" #'org-agenda-week-view)

(map! :leader
      :desc "switch to month view"
      "o a m" #'org-agenda-month-view)

(map! :leader
      :desc "switch to month view"
      "o a y" #'org-agenda-year-view)
#+end_src
*** Babel
Tangle a file
#+begin_src emacs-lisp
(map! :leader
          :desc "Tangle a file"
          "b t" #'org-babel-tangle)
#+end_src

Execute the selected source block (used for literate programming)
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute selected source block"
      "c b" #'org-babel-execute-src-block)

#+end_src

Execute all src blocks in buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute buffer"
      "c B" #'org-babel-execute-buffer)
#+end_src

Add languages to org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t) (org . t) (nim . t) (python . t) (erlang . t) (ein . t)))
#+end_src
*** Org Tempo templates
I expirment with difrent languages, org babel makes things easy.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("nim" . "src nim"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src common-lisp")))
#+end_src



*** Org Wiki
#+begin_src emacs-lisp :tangle no
(require 'org-wiki)
#+end_src

#+RESULTS:
: org-wiki



Setting the defualt wiki loaction
#+begin_src emacs-lisp
(setq org-wiki-location-list
      '("~/Documents/Notes/org/org-wiki/" "~/Documents/Notes/org/hacker-wiki/"))
(setq org-wiki-location (car org-wiki-location-list))
#+end_src



Setting a backup location so i dont lose my wiki and hard work.
#+begin_src emacs-lisp
(setq org-wiki-backup-location "~/.backups/")
#+end_src


Close all wiki pages when swtiching root
#+begin_src emacs-lisp
(setq org-wiki-close-root-switch t)
#+end_src

Here im creating a new prefix for org-wiki.
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix ("w" . "wiki")
        :desc "New Wiki Page" "n"  #'org-wiki-new
        :desc "Switch Wiki root" "S" #'org-wiki-switch-root
        :desc "Back up wiki" "B" #'org-wiki-backup-make
        :desc "open Wiki root in dired" "o" #'org-wiki-dired
        :desc "open Wiki root  with the system file editor" "O" #'org-wiki-open
        :desc "open wiki panel" "p" #'org-wiki-panel)))
#+end_src



My atempt at creating a wiki link that failed
#+begin_src emacs-lisp
;;(map!
;; :after org
;; :map org-mode-map
;; :localleader
;; :nv "w n" #'org-wki-insert-new)
#+end_src

#+RESULTS:

*** TODO Org Mode config
Create a function to tangle and sync doom at the same time

** Yasnippet
Add a new template
#+begin_src emacs-lisp
(map! :leader
      :desc "Add a neew template to yasnippet"
      "a y s" #'+snippets/new)
#+end_src

Edit a template
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit template"
      "a y e" #'+snippets/find)
#+end_src

** Deft
Deft is used for notes. here im setting the default directory
#+begin_src emacs-lisp
(setq deft-extenstions '("txt", "org", "md"))
(setq deft-directory "~/Documents/Notes")
#+end_src

Deft is not recursive by defualt (it will not go into sub directories)
#+begin_src emacs-lisp
(setq deft-recursive t)
#+end_src
Tell deft to use the filename as the Title of the note
#+begin_src emacs-lisp
(setq deft-use-filename-as-title t)
#+end_src

** Notifications
#+begin_src emacs-lisp
(require 'notifications)
#+end_src
** RSS (Elfeed)
#+begin_src emacs-lisp
(require 'elfeed-org)
#+end_src
Hook elfeed-org to elfeed
#+begin_src emacs-lisp
(elfeed-org)
#+end_src
Tell elfeed where to look for org mode files

#+begin_src emacs-lisp
(setq rmh-elfeed-org-files '("~/Documents/Notes/org/rss.org"))
#+end_src


** Webpaste
Webpaste allows you to paste text to pastebin like web services
#+begin_src emacs-lisp
(require 'webpaste)
#+end_src

Tell Webpaste to confirm before upload
#+begin_src emacs-lisp
(setq webpaste-paste-confirmation t)
#+end_src

Provider priority
#+begin_src emacs-lisp
(setq webpaste-provider-priority '("ix.io" "dpaste.org"
                                   "dpaste.com" "clbin.com"
                                   "0x0.st" "bpa.st"
                                   "paste.rs"))
#+end_src



Setting Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix ("p" . "webpaste")
        :desc "paste region to a paste service" "r" #'webpaste-paste-region
        :desc "paste entire buffer to paste service" "b" #'webpaste-paste-buffer)))
#+end_src

**  Pcap mode
You can view a pcap file with tshark

#+begin_src emacs-lisp
(require 'pcap-mode)
#+end_src


* Programming

This section would not fit well, therefor it is in its own.

** Python

I Have problems with indent getting reset, i will explicitly set it.
#+begin_src emacs-lisp
(setq python-ident-offset 4)
#+end_src

Fix lsp not being found on nixos
#+begin_src emacs-lisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
#+end_src

#+begin_src emacs-lisp
(use-package! python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :config
  (set-ligatures! 'python-mode
    ;; Functional
    :def "def"
    :lambda "lambda"
    ;; Types
    :null "None"
    :true "True" :false "False"
    :int "int" :str "str"
    :float "float"
    :bool "bool"
    :tuple "tuple"
    ;; Flow
    :not "not"
    :in "in" :not-in "not in"
    :and "and" :or "or"
    :for "for"
    :return "return" :yield "yield")

  (setq python-indent-guess-indent-offset-verbose nil)

  ;; Default to Python 3. Prefer the versioned Python binaries since some
  ;; systems stupidly make the unversioned one point at Python 2.
  (when (and (executable-find "python3")
             (string= python-shell-interpreter "python"))
    (setq python-shell-interpreter "python3"))

  (add-hook! 'python-mode-hook
    (defun +python-use-correct-flycheck-executables-h ()
      "Use the correct Python executables for Flycheck."
      (let ((executable python-shell-interpreter))
        (save-excursion
          (goto-char (point-min))
          (save-match-data
            (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
                      (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
              (setq executable (substring-no-properties (match-string 1))))))
        ;; Try to compile using the appropriate version of Python for
        ;; the file.
        (setq-local flycheck-python-pycompile-executable executable)
        ;; We might be running inside a virtualenv, in which case the
        ;; modules won't be available. But calling the executables
        ;; directly will work.
        (setq-local flycheck-python-pylint-executable "pylint")
        (setq-local flycheck-python-flake8-executable "flake8"))))

  (define-key python-mode-map (kbd "DEL") nil) ; interferes with smartparens
  (sp-local-pair 'python-mode "'" nil
                 :unless '(sp-point-before-word-p
                           sp-point-after-word-p
                           sp-point-before-same-p))

  (setq-hook! 'python-mode-hook tab-width python-indent-offset))
;; Set Path To pylsp and pyls otherwise it doesn't work
(setq lsp-pyls-server-command "~/.local/bin/pyls")
(setq lsp-pylsp-server-command "~/.local/bin/pylsp")
;; Set Flake8 Ignore Codes
#+end_src

** Direnv
Make life easy!
#+begin_src emacs-lisp
(require 'direnv)
#+end_src
* Misc
** Performance
Enable explain Pause mode

Alerts you when somthing takes some time (40ms)
disabled becuae I swear it causes me problems
#+begin_src emacs-lisp
(explain-pause-mode nil)
#+end_src

** Enviroment



Sets PATH
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Url proxy
I use i2p and having elfeed use a proxy would be nice
#+begin_src emacs-lisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "*.i2p:4444")))

#+end_src
