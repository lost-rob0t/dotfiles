#+TITLE: Doom Emacs configuration
#+AUTHOR: nsaspy
#+PROPERTY: header-args :emacs-lisp tangle: ./config.el :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+DISABLE_SPELLCHECKER: t
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

#+end_src
* TODO update config [1/5]
- [ ] add pcap-mode
- [ ] add desktop notifcations
- [ ] Add theme toggle
- [ ] Replace org-adgenda views with org super agenda
- [X] add org-wiki insert-new at point function


* Styling
** Theme
I like doom's outrun eletric theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Packages
** Magit
Set keybind for pushing to remote
Pushes the current branch to the remote
(eg: local master > remote master)
#+begin_src emacs-lisp
(map! :leader
      :desc "Push Current branch to remote branch"
      "g p P" #'magit-push-current-to-pushremote)
#+end_src

Same as above but for pulling from remote
#+begin_src emacs-lisp
(map! :leader
      :desc "Pull current branch from remote"
      "g p p" #'magit-pull-from-pushremote)
#+end_src
** Projectile
Setting the path to find projects
I store my stuff in ~/Documents/Projects
#+begin_src emacs-lisp
(setq projectile-project-search-path
      '(("~/Documents/Projects" . 1)))
#+end_src

** Org Mode
Setting org dir
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notes/org")
#+end_src
*** Org Agenda views
I prefer being able to have difrent views within org agenda, so i can see whats comming up ahead of time.
#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to week view"
      "o a w" #'org-agenda-week-view)

(map! :leader
      :desc "switch to month view"
      "o a m" #'org-agenda-month-view)

(map! :leader
      :desc "switch to month view"
      "o a y" #'org-agenda-year-view)
#+end_src
*** Babel
Tangle a file
#+begin_src emacs-lisp
(map! :leader
          :desc "Tangle a file"
          "b t" #'org-babel-tangle)
#+end_src

Execute the selected source block (used for literate programming)
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute selected source block"
      "c b" #'org-babel-execute-src-block)

#+end_src

Execute all src blocks in buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Babel execute buffer"
      "c B" #'org-babel-execute-buffer)
#+end_src

Add languages to org babel

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t) (org . t) (nim . t) (python . t) (erlang . t) (ein . t)))
#+end_src
*** Org Tempo templates
I expirment with difrent languages, org babel makes things easy.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("nim" . "src nim"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src common-lisp")))
#+end_src

*** TODO Org Mode config
Create a function to tangle and sync doom at the same time

** Org Roam
A Personal wiki

Set roam directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/Notes/org/roam")
#+end_src

Set a daily capture format
#+begin_src emacs-lisp
(setq  org-roam-capture-templates '(
        ("d" "default" entry (function org-roam--capture-get-point)
          "* %<%I:%M %p>: %?"
           :file-name "%<%Y-%m-%d-%H%M%S>-${slug}"
           :head "#+TITLE: ${title} "
           :unnarrowed t)
        ("u" "url" entry (function org-roam--capture-get-point)
          "* %?\n- Comment: "
          :file-name "references/%<%Y-%m-%d-%H%M%S>-${slug}"
          :head "#+TITLE: ${title}"
          :unnarrowed t)))
#+end_src

url2org function fro importing info from the web

#+begin_src emacs-lisp
(defun url2org (begin end)
  "Download a webpage from selected url and convert to org."
  (interactive "r")
  (shell-command-on-region begin end
    (concat "pandoc --from=html --to=org " (buffer-substring begin end))
   nil t))
#+end_src










** Yasnippet
Add a new template
#+begin_src emacs-lisp
(map! :leader
      :desc "Add a neew template to yasnippet"
      "a y s" #'+snippets/new)
#+end_src

Edit a template
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit template"
      "a y e" #'+snippets/find)
#+end_src

** Deft
Deft is used for notes. here im setting the default directory
#+begin_src emacs-lisp
(setq deft-extenstions '("txt", "org", "md"))
(setq deft-directory "~/Documents/Notes")
#+end_src

Deft is not recursive by defualt (it will not go into sub directories)
#+begin_src emacs-lisp
(setq deft-recursive t)
#+end_src
Tell deft to use the filename as the Title of the note
#+begin_src emacs-lisp
(setq deft-use-filename-as-title t)
#+end_src

** Notifications
#+begin_src emacs-lisp
(require 'notifications)
#+end_src
** RSS (Elfeed)
#+begin_src emacs-lisp
(require 'elfeed-org)
#+end_src
Hook elfeed-org to elfeed
#+begin_src emacs-lisp
(elfeed-org)
#+end_src
Tell elfeed where to look for org mode files

#+begin_src emacs-lisp
(setq rmh-elfeed-org-files '("~/Documents/Notes/org/rss.org"))
#+end_src


** Webpaste
Webpaste allows you to paste text to pastebin like web services
#+begin_src emacs-lisp
(require 'webpaste)
#+end_src

Tell Webpaste to confirm before upload
#+begin_src emacs-lisp
(setq webpaste-paste-confirmation t)
#+end_src

Provider priority
#+begin_src emacs-lisp
(setq webpaste-provider-priority '("ix.io" "dpaste.org"
                                   "dpaste.com" "clbin.com"
                                   "0x0.st" "bpa.st"
                                   "paste.rs"))
#+end_src



Setting Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:prefix ("p" . "webpaste")
        :desc "paste region to a paste service" "r" #'webpaste-paste-region
        :desc "paste entire buffer to paste service" "b" #'webpaste-paste-buffer)))
#+end_src

**  Pcap mode
You can view a pcap file with tshark

#+begin_src emacs-lisp
(require 'pcap-mode)
#+end_src

** inherit org
inherit-org: Inherit org faces to non-org buffers.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'inherit-org)

  (with-eval-after-load 'info
    (add-hook 'Info-mode-hook 'inherit-org-mode))

  (with-eval-after-load 'helpful
    (add-hook 'helpful-mode-hook 'inherit-org-mode))

  (with-eval-after-load 'w3m
    (add-hook 'w3m-fontify-before-hook 'inherit-org-w3m-headline-fontify) ;only one level is supported
    (add-hook 'w3m-fontify-after-hook 'inherit-org-mode)))
#+end_src

** W3M

set w3m as my browser in emacs
#+begin_src emacs-lisp
 (setq browse-url-browser-function  'w3m-goto-url-new-session)
#+end_src

fix textarea
#+begin_src emacs-lisp
 (eval-after-load "w3m-form"
  '(progn
     (define-minor-mode dme:w3m-textarea-mode
       "Minor mode used when editing w3m textareas."
       nil " dme:w3m-textarea" w3m-form-input-textarea-keymap)
     (defun dme:w3m-textarea-hook ()
       ; protect the form local variables from being killed by `text-mode'
       (mapcar (lambda (v)
		 (if (string-match "^w3m-form-input-textarea.*"
				   (symbol-name (car v)))
		     (put (car v) 'permanent-local t)))
	       (buffer-local-variables))
       (text-mode)
       (dme:w3m-textarea-mode))
     (add-hook! 'w3m-form-input-textarea-mode-hook 'dme:w3m-textarea-hook)))
#+end_src
* Programming

This section would not fit well, therefor it is in its own.

** Python

I Have problems with indent getting reset, i will explicitly set it.
#+begin_src emacs-lisp
(setq python-ident-offset 4)
#+end_src

Fix lsp not being found on nixos
#+begin_src emacs-lisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
#+end_src



** Direnv
Make life easy!
#+begin_src emacs-lisp
(envrc-global-mode)
#+end_src

** Nix
Nix is a language that allows for repoducible declarative systems/packages.



* Misc
** Performance
Enable explain Pause mode

Alerts you when somthing takes some time (40ms)
disabled becuae I swear it causes me problems
#+begin_src emacs-lisp
(explain-pause-mode nil)
#+end_src

** Enviroment



Sets PATH
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Url proxy
I use i2p and having elfeed use a proxy would be nice
#+begin_src emacs-lisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "*.i2p:4444")))

#+end_src
